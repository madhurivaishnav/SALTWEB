using System;
using System.Runtime.Serialization;

namespace Bdw.Application.Salt.Data
{
    /// <summary>
    /// There are two types of exceptions:
    /// 1. User-defined Application Exception (Derived from the ApplicationException class):
    /// This type of exception is generated in the business service classes or other application classes. They are expected and non-fatal.
    /// It is normally used by data validation. In cases where this class is instantiated, a human-readable message describing the error should be passed to the constructor.
    /// In most scenarios, instances of this class should not be thrown. 
    /// Web site aspx file should catch this exception and  show it in user interface and don't bubble it futher.
    ///
    /// 2. System Exception (Derived from the SystemException class)
    /// This type of exception is generated by the data access classes or common language runtime. 
    /// They are unexpected and critical, it is usually caused by wrong code.
    /// It is not recommended that you catch a System Exception.
    /// This exception should not be displayed in user interface and need to be bubbled up
    /// The application will log this exception and redirect user to error page.
    /// </summary>
	[Serializable()] 
	public class BusinessServiceException : System.ApplicationException
	{
        /// <summary>
        /// Constructor for a business server exception
        /// </summary>
		public BusinessServiceException()
		{
		}

        /// <summary>
        /// Constructor for a business server exception with a custom message
        /// </summary>
        /// <param name="message">Custom Message</param>
		public BusinessServiceException(string message) : base(message)
		{
		}

        /// <summary>
        /// Constructor for a business server exception with a custom message and an inner message
        /// </summary>
        /// <param name="message">Custom Message</param>
        /// <param name="inner">Inner Message</param>
		public BusinessServiceException(string message, Exception inner) : base(message + "<br>" + inner.Message)
		{
		}
		
        /// <summary>
        /// This protected constructor is used for deserialization.
        /// </summary>
        /// <param name="info">Serialization information</param>
        /// <param name="context">Streaming Context</param>
		protected BusinessServiceException( SerializationInfo info, StreamingContext context ): base( info, context )
		{
		}
	}


	/// <summary>
	/// Usage:(1)
	/// 1. Access one specific entity details,but that entity doesn't exist
	/// </summary>
	[Serializable()] 
	public class RecordNotFoundException : BusinessServiceException
	{
        /// <summary>
        /// Record not found exception
        /// </summary>
		public RecordNotFoundException()
		{
		}
        /// <summary>
        /// Record not found exception with a custom message
        /// </summary>
        /// <param name="message">Custom Message</param>
        public RecordNotFoundException(string message) : base(message)
		{
		}

        /// <summary>
        /// Record not found exception with a custom message and inner message
        /// </summary>
        /// <param name="message">Custom Message</param>
        /// <param name="inner">Inner Message</param>
		public RecordNotFoundException(string message, Exception inner) : base(message + "<br>" + inner.Message)
		{
		}

        /// <summary>
        /// This protected constructor is used for deserialization.
        /// </summary>
        /// <param name="info">Serialization information</param>
        /// <param name="context">Streaming Context</param>
		protected RecordNotFoundException( SerializationInfo info, StreamingContext context ): base( info, context )
		{
		}
	}

	/// <summary>
	/// Usage:(2)
	/// 1. Insert a record, the value of FK column doesn't exist
	/// 2. Update a record, the value of FK column doesn't exist
	/// 3. Delete a record, there are other records have reference to it
	/// </summary>
	[Serializable()] 
	public class FKViolationException : BusinessServiceException
	{
        /// <summary>
        /// Foreign Key Violation Exception
        /// </summary>
		public FKViolationException()
		{
		}

        /// <summary>
        /// Foreign Key Violation Exception with a cusom message
        /// </summary>
        /// <param name="message">Custom Message</param>
		public FKViolationException(string message) : base(message)
		{
		}

        /// <summary>
        /// Foreign Key Violation Exception with a custom message and inner message
        /// </summary>
        /// <param name="message">Custom Message</param>
        /// <param name="inner">Inner Message</param>
		public FKViolationException(string message, Exception inner) : base(message + "<br>" + inner.Message)
		{
		}
		
        /// <summary>
        /// This protected constructor is used for deserialization.
        /// </summary>
        /// <param name="info">Serialization information</param>
        /// <param name="context">Streaming Context</param>
		protected FKViolationException( SerializationInfo info, StreamingContext context ): base( info, context )
		{
		}
	}

	/// <summary>
	/// Usage:(3)
	/// 1. Primary key is not identity column,  update or insert duplicated PK record, it is similar to the UniqueViolationException
	/// </summary>
	[Serializable()] 
	public class PKViolationException : BusinessServiceException
	{
        /// <summary>
        /// Primary Key Violation Exception
        /// </summary>
		public PKViolationException()
		{
		}
        /// <summary>
        /// Primary Key Violation Exception
        /// </summary>
        /// <param name="message">Custom Message</param>
        public PKViolationException(string message) : base(message)
		{
		}
        /// <summary>
        /// Primary Key Violation Exception
        /// </summary>
        /// <param name="message">Custom Message</param>
        /// <param name="inner">Inner Message</param>
		public PKViolationException(string message, Exception inner) : base(message + "<br>" + inner.Message)
		{
		}

        /// <summary>
        /// This protected constructor is used for deserialization.
        /// </summary>
        /// <param name="info">Serialization information</param>
        /// <param name="context">Streaming Context</param>
		protected PKViolationException( SerializationInfo info, StreamingContext context ): base( info, context )
		{
		}
	}

	/// <summary>
	/// Usage:(4)
	/// 1. Insert or update a record, the value of unique column exists
	///    e.g. In user table, UserName is unique, you can't save two records with same UserName
	/// </summary>
	[Serializable()] 
	public class UniqueViolationException : BusinessServiceException
	{
        /// <summary>
        /// Unique Violation Exception
        /// </summary>
		public UniqueViolationException()
		{
		}

        /// <summary>
        /// Unique Violation Exception with a custom message
        /// </summary>
        /// <param name="message">Custom Message</param>
        public UniqueViolationException(string message) : base(message)
		{
		}

        /// <summary>
        /// Unique Violation Exception
        /// </summary>
        /// <param name="message">Custom Message</param>
        /// <param name="inner">Inner Message</param>
		public UniqueViolationException(string message, Exception inner) 	: base(message + "<br>" + inner.Message)
		{
		}

        /// <summary>
        /// This protected constructor is used for deserialization.
        /// </summary>
        /// <param name="info">Serialization information</param>
        /// <param name="context">Streaming Context</param>
		protected UniqueViolationException( SerializationInfo info, StreamingContext context ): base( info, context )
		{
		}
	}

	/// <summary>
	/// Usage(6)
	/// This exception is caseud from invalid permissions
	/// </summary>
	[Serializable()] 
	public class PermissionDeniedException : BusinessServiceException
	{
        /// <summary>
        /// Permission denied exception
        /// </summary>
		public PermissionDeniedException()
		{
		}

        /// <summary>
        /// Permission denied exception with a custom message
        /// </summary>
        /// <param name="message">Custom Message</param>
        public PermissionDeniedException(string message) : base(message)
		{
		}

        /// <summary>
        /// Permission denied exception with a custom message and inner message
        /// </summary>
        /// <param name="message">Custom Message</param>
        /// <param name="inner">Inner Message</param>
		public PermissionDeniedException(string message, Exception inner) : base(inner.Message + "<br>" + message )
		{
		}

        /// <summary>
        /// This protected constructor is used for deserialization.
        /// </summary>
        /// <param name="info">Serialization information</param>
        /// <param name="context">Streaming Context</param>
		protected PermissionDeniedException( SerializationInfo info, StreamingContext context ): base( info, context )
		{
		}
	}

	/// <summary>
	/// Usage(7)
	/// This exception is caseud from an integrity violation.
	/// </summary>
	[Serializable()] 
	public class IntegrityViolationException : BusinessServiceException
	{
        /// <summary>
        /// Integrity Violation Exception
        /// </summary>
		public IntegrityViolationException()
		{
		}

        /// <summary>
        /// Integrity Violation Exception with a custom message
        /// </summary>
        /// <param name="message">Custom Message</param>
        public IntegrityViolationException(string message) : base(message)
		{
		}

        /// <summary>
        /// Integrity Violation Exception with a custom message and inner message
        /// </summary>
        /// <param name="message">Custom Message</param>
        /// <param name="inner">Inner Message</param>
		public IntegrityViolationException(string message, Exception inner) : base(inner.Message + "<br>" + message )
		{
		}

        /// <summary>
        /// This protected constructor is used for deserialization.
        /// </summary>
        /// <param name="info">Serialization information</param>
        /// <param name="context">Streaming Context</param>
		protected IntegrityViolationException( SerializationInfo info, StreamingContext context ): base( info, context )
		{
		}
	}

	/// <summary>
	/// This exception is generated in data access layer. 
	/// The exception is unexpected, it is usually caused by wrong code.
	/// </summary>
	[Serializable()] 
	public class DatabaseException : System.Data.DataException
	{
        /// <summary>
        /// Database Exception with a custom message and inner message
        /// </summary>
		public DatabaseException()
		{
		}

      
        /// <summary>
        /// Database Exception with a custom message and inner message
        /// </summary>
        /// <param name="message">Custom Message</param>
		public DatabaseException(string message) : base(message)
		{
		}

        /// <summary>
        /// Database Exception with a custom message and inner message
        /// </summary>
        /// <param name="message">Custom Message</param>
        /// <param name="inner">Inner Message</param>
		public DatabaseException(string message, Exception inner) : base(inner.Message + "<br>" + message )
		{
		}

        /// <summary>
        /// This protected constructor is used for deserialization.
        /// </summary>
        /// <param name="info">Serialization information</param>
        /// <param name="context">Streaming Context</param>
		protected DatabaseException( SerializationInfo info, StreamingContext context ): base( info, context )
		{
		}
	}

	/// <summary>
	/// Usage(5)
	/// This is an unexpected exception usually caused from bad code.
	/// </summary>
	[Serializable()] 
	public class ParameterException : System.ArgumentException
	{
        /// <summary>
        /// Parameter Exception with a custom message and inner message
        /// </summary>
		public ParameterException()
		{
		}

        /// <summary>
        /// Parameter Exception with a custom message and inner message
        /// </summary>
        /// <param name="message">Custom Message</param>
		public ParameterException(string message) : base(message)
		{
		}

        /// <summary>
        /// Parameter Exception with a custom message and inner message
        /// </summary>
        /// <param name="message">Custom Message</param>
        /// <param name="inner">Inner Message</param>
		public ParameterException(string message, Exception inner) : base(inner.Message + "<br>" + message )
		{
		}

        /// <summary>
        /// This protected constructor is used for deserialization.
        /// </summary>
        /// <param name="info">Serialization information</param>
        /// <param name="context">Streaming Context</param>
		protected ParameterException( SerializationInfo info, StreamingContext context ): base( info, context )
		{
		}
	}


}