SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[udfReport_HistoricAdminSummaryOptimised]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'/****** Object:  User Defined Function dbo.udfReport_HistoricAdminSummary    Script Date: 20/04/2004 8:25:58 AM ******/
/*Summary:
Get the Current or historic user module status  based on the search criteria
See the remarks below.
Returns: table
Called By: Current historic Admin Report
Calls:
Remarks:
1. Get User and course List based on search criteria
1.1 Get Unit List
1.1.1 If unit ids are passed in, convert the CSV format to a table
1.1.2 If no unit is selected, get a list of of all units that the admin user has permission to access
1.2 Get User list Based on the first name and last name in the search cirteria
1.3 Get Course list Based on the selected course in the search criteria and Used can select multiple Courses
2. Get the User Quiz and Lesson status up to the effective date
2.1 If there is no effective date is passed in, get the current module status
2.2 If there is effective date, get the module status up to the effective date
3.  Get a list of the user''s quiz and lesson historic status
Author: Jack Liu
Date Created: 1 Mar 2004
Modification History
-----------------------------------------------------------
v#	Author		Date				Description
#1.1	Usman Tjiudri	10/11/2005	Performance tuning:
- use temp-table to populate Unit Pathway
- join the temp-table to populate tblResult
instead of using udfGetUnitPathway function in the join.
#2.0	Serguei Chkaroupine 28/02/06 -New insert statement for histric admin report
- it will insert all lessons that match current quizmodule pair
- Current admin report performance fix. Added WHERE statement to
most of the insert statements.
#3	Mark Donald	27/07/2009			add userName and userEmail params
#4	William Tio	01/12/2009
- remove the wrong logic to exclude the user quiz/lesson status
- replace with ''not exists''

select * from dbo.udfReport_HistoricAdminSummary(3, '''', ''1,2,3,4'','''','''',NULL,NULL,''20040222'',4)
--------------------
**/

CREATE                Function [dbo].[udfReport_HistoricAdminSummaryOptimised]
(
@organisationID 	Int,
@unitIDs			Varchar(max),
@courseIDs			Varchar(8000),
@userFirstName		Varchar(50),
@userLastName		Varchar(50),
@userName			Varchar(100),
@userEmail			Varchar(100),
@effectiveDate 		Datetime,
@adminUserID		Int,
@classificationID 	Int,
@defaultDate		DateTime,
@inclInactive		int
)
Returns @tblResult Table
(
-- General
Unit			nVarchar(200),
[User]			nVarchar(100),
Course			nVarchar(100),
Module			nVarchar(100),
[Sequence]		Int,
-- Quiz Specific
QuizStatus		Varchar(50),
QuizScore		Int,
QuizStatusDate	Datetime,
-- Lesson Specific
LessonStatus	Varchar(50),
-- Hidden
UnitID			Int,
UserID			Int,
UserName		nVarchar(100),
ExternalID		nVarchar(50),
CourseID		Int,
ModuleID		Int,
Active	int
)
As Begin

--Variables declarations
DECLARE @UserTypeID 	INT
DECLARE @tblUnit 				Table(UnitID INT PRIMARY KEY(UnitID))
DECLARE @tblUser 				Table(UserID INT, UnitID INT, Active INT)
DECLARE @tblCourse 				Table(CourseID INT, [Name] NVARCHAR(100) PRIMARY KEY(CourseID))
DECLARE @CoursesWithAccess 		TABLE (CourseID INT PRIMARY KEY(CourseID))
DECLARE @UserModuleWithAccess 	TABLE(UserID INT, ModuleID INT, UnitID INT PRIMARY KEY(UserID, ModuleID, UnitID))
DECLARE @AllModules 			TABLE(ModuleID INT PRIMARY KEY(ModuleID))
DECLARE @tblUserQuizStatus 		Table
(
[UserQuizStatusID] [int] Not Null,
[UserID] [int] Not Null,
[ModuleID] [int] Not Null,
[QuizStatusID] [int] Not Null,
[QuizScore] [int] Null,
[DateCreated] [datetime] Not Null
)
DECLARE @tblUserLessonStatus 	Table
(
[UserLessonStatusID] [int] ,
[UserID] [int] ,
[ModuleID] [int] ,
[LessonStatusID] [int] ,
[DateCreated] [datetime]
)
DECLARE @vwUserModuleAccess table
(
UserID INT not null,
FirstName varchar(255),
LastName varchar(255),
UnitID INT,
OrganisationID INT,
ModuleID INT,
CourseID INT,
CourseName nvarchar(100),
[Name] nvarchar(100),
Sequence INT,
Description nvarchar(1000)
)

DECLARE @tblOrganisationCourseAccess table
(
OrganisationID int,
GrantedCourseID int
)
---------------------------------------------------------------------------------------------

--set the default date depending on effective date
set @defaultdate = coalesce (@effectivedate,@defaultdate)
---------------------------------------------------------------------------------------------

--Check If Unit ID is specified
IF @unitIDs IS NULL
BEGIN
--Check User Type
SELECT
@UserTypeID = UserTypeID
FROM
tblUser
WHERE UserID = @adminUserID

--Get all units in Organisation if user is Salt Admin(1) or Org admin (2)
IF (@UserTypeID = 1 Or @UserTypeID = 2)
BEGIN
INSERT INTO
@tblUnit (UnitID)
SELECT
UnitID
FROM
tblUnit
WHERE OrganisationID = @OrganisationID
END

--Get units that the user is admministrator if user is Unit Admin(3)
IF (@UserTypeID = 3)
BEGIN
INSERT INTO
@tblUnit (UnitID)
SELECT
U.UnitID
FROM
tblUnit U INNER JOIN tblUnitAdministrator UA ON
UA.UnitID = U.UnitID AND
UA.UserID = @adminUserID
WHERE
U.OrganisationID = @OrganisationID
END
END
ELSE
BEGIN
--Seperate comma seperated values as Table rows
INSERT INTO @tblUnit SELECT * FROM  dbo.udfCsvToInt(@unitIDs)
END
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
--FirstName, Last Name, etc specified in search criteria
IF (@userFirstName IS NULL) 	SET @userFirstName = ''''
IF (@userLastName IS NULL) 		SET @userLastName = ''''
IF (@userName IS NULL) 			SET @userName = ''''
IF (@userEmail IS NULL) 		SET @userEmail = ''''

INSERT INTO
@tblUser (UserID, UnitID, Active)
SELECT DISTINCT
U.UserID, U.UnitID, U.Active
FROM
tblUser U INNER JOIN @tblUnit UN ON	U.UnitID = UN.UnitID
and datediff(day,U.datecreated,@defaultdate)>=0-- created on or b4 specified date
LEFT JOIN tblUserClassification UC ON UC.UserID  = U.UserID
WHERE
U.FirstName Like ''%'' + @userFirstName + ''%'' AND
LastName Like ''%'' + @userLastName + ''%'' AND
UserName Like ''%'' + @userName + ''%'' AND
Email Like ''%'' + @userEmail + ''%'' AND
--AND have the Custom Classification option
--If classification is Any (0), This will find users of any Custom Classification
((@classificationID = 0) OR (UC.classificationID = @classificationID)) AND
--inclInactive = 0: do not include inactive user
--inclInactive = 1: include inactive user
(U.Active = CASE @inclInactive WHEN 0 THEN 1 ELSE U.Active END) AND
(U.OrganisationID = @OrganisationID)

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
-- Search criteria contains Course IDs
INSERT INTO
@tblCourse (CourseID, [Name])
SELECT
C.CourseID, C.[Name]
FROM
dbo.udfCsvToInt(@courseIDs) CA INNER JOIN tblCourse C ON
CA.intValue = C.CourseID AND C.Active = 1

-- added to deal with past courses - adds past course to intermediate @tblOrganisationCourseAccess table
-- to mimic it being a current course so results will be returned
insert into
@tblOrganisationCourseAccess (OrganisationID, GrantedCourseID)
select
@Organisationid, C.CourseID
from
dbo.udfCsvToInt(@courseIDs) CA inner join tblCourse C on
CA.intValue = C.CourseID and C.Active = 1

INSERT INTO @vwUserModuleAccess   SELECT   tU.UserID, tU.FirstName, tU.LastName, tU.UnitID, tU.OrganisationID, tM.ModuleID, tM.CourseID, tC.Name AS CourseName, tM.Name, tM.Sequence,
tM.Description
FROM         tblUser AS tU INNER JOIN
@tblUser tbU on tbU.UserID = tU.UserID
inner join
@tblOrganisationCourseAccess AS tOCA ON tOCA.OrganisationID = tU.OrganisationID INNER JOIN
tblCourse AS tC ON tC.CourseID = tOCA.GrantedCourseID INNER JOIN
tblModule AS tM ON tM.CourseID = tC.CourseID AND tM.Active = 1 LEFT OUTER JOIN
tblUserModuleAccess AS tUsrMA ON tUsrMA.UserID = tU.UserID AND tUsrMA.ModuleID = tM.ModuleID LEFT OUTER JOIN
tblUnitModuleAccess AS tUnitMA ON tUnitMA.UnitID = tU.UnitID AND tUnitMA.DeniedModuleID = tM.ModuleID
WHERE     tM.CourseID in (SELECT courseid from @tblCourse ) AND (tU.UnitID IS NOT NULL) AND (tUnitMA.DeniedModuleID IS NULL) AND (tUsrMA.ModuleID IS NULL) OR
(tUsrMA.Granted = 1)
--select * from @vwUserModuleAccess where UnitID is null

INSERT INTO @UserModuleWithAccess
SELECT DISTINCT UserID, ModuleID, UnitID FROM @vwUserModuleAccess where UnitID is not null

INSERT INTO @tblUserQuizStatus
(
[UserQuizStatusID],
[UserID],
[ModuleID],
[QuizStatusID],
[QuizScore],
[DateCreated]
)
SELECT
A.[UserQuizStatusID],
A.[UserID],
A.[ModuleID],
A.[QuizStatusID],
A.[QuizScore],
A.[DateCreated]
FROM
(
SELECT
A.UserID, A.ModuleID, MAX(B.UserQuizStatusID) AS ''LatestQuizID''
FROM
@UserModuleWithAccess A, tblUserQuizStatus B
WHERE
A.UserID = B.UserID AND A.ModuleID = B.ModuleID AND B.QuizStatusID <> 0
AND DateDiff(day, B.DateCreated, @effectiveDate)>=0
GROUP BY
A.UserID, A.ModuleID
) B, tblUserQuizStatus A, @tblUser C
WHERE
A.UserQuizStatusID = B.LatestQuizID AND B.UserID = C.UserID AND A.UserID = C.UserID
-- li June 2008:
-- User who has access to a module but doesnt have a record in tblUserQuizStatus is a new user
-- this logic will include new user in the current and historic admin report before user quiz status
-- is updated by overnight job

INSERT INTO @tblUserQuizStatus
(
[UserQuizStatusID],
[UserID],
[ModuleID],
[QuizStatusID],
[QuizScore],
[DateCreated]
)
SELECT
0, -- UserQuizStatusID
A.[UserID],
A.[ModuleID],
1, -- QuizStatus: Not Started
null, -- QuizScore
@defaultDate -- DateCreated (here set to @defaultdate which is passed in as getDate())
FROM @UserModuleWithAccess A
join  @tblUser B on A.UserID = B.UserID
-- User doesnt have quiz activities
/* WT: this part is replaced with not exists, the logic below will subtract userid with moduleid
where  A.UserID  + ''-'' + A.MODULEID NOT IN
(	Select D.UserID + ''-'' + D.Moduleid
from @tblUserQuizStatus D
where datediff(day, d.datecreated, @defaultdate)>=0)*/
where not exists
(	Select D.UserID, D.Moduleid
from @tblUserQuizStatus D
where datediff(day, d.datecreated, @defaultdate)>=0
and D.Userid=B.userid and D.moduleid=A.moduleid
)
-- end logic for including new users quiz status



Insert Into @tblUserLessonStatus
(
[UserLessonStatusID],
[UserID],
[ModuleID],
[LessonStatusID],
[DateCreated]
)
Select
A.[UserLessonStatusID],
A.[UserID],
A.[ModuleID],
A.[LessonStatusID],
A.[DateCreated]
FROM
(
SELECT
B.UserID, B.ModuleID, MAX(B.UserLessonStatusID) AS ''LatestLessonStatusID''
FROM
@UserModuleWithAccess A, tblUserLessonStatus B
WHERE
A.UserID = B.UserID AND A.ModuleID = B.ModuleID AND
DateDiff(day, B.DateCreated, @effectiveDate)>=0 AND
B.LessonStatusID <> 0 --Unassigned
GROUP BY
B.UserID, B.ModuleID
) B, tblUserLessonStatus A, @tblUser C
WHERE
A.UserLessonStatusID = B.LatestLessonStatusID AND B.UserID = C.UserID AND A.UserID = C.UserID

-- start logic for including new users lesson status
INSERT INTO @tblUserLessonStatus
(
[UserLessonStatusID],
[UserID],
[ModuleID],
[LessonStatusID],
[DateCreated]
)
SELECT
0, -- UserLessonStatusID
A.[UserID],
A.[ModuleID],
1, -- LessonStatus: Not Started
@defaultDate -- DateCreated (here set to @defaultdate which is passed in as getDate())
FROM @UserModuleWithAccess A
join  @tblUser B on A.UserID = B.UserID
where
-- User doesnt have lesson activities for the date entered
/* WT: this part is replaced with not exists, the logic below will subtract userid with moduleid
A.UserID + ''-'' + A.Moduleid NOT IN
(	Select D.UserID + ''-'' + D.Moduleid
from @tblUserLessonStatus D
where datediff(day, d.datecreated, @defaultdate)>=0 )*/
not exists
(	Select D.UserID, D.Moduleid
from @tblUserLessonStatus D
where datediff(day, d.datecreated, @defaultdate)>=0
and D.Userid=B.userid and D.moduleid=A.moduleid
)
-- end logic for including new users lesson status

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
-- This part fixes migration issue (note this will affect historic admin report only as it does supply effective date)
-- It will insert userid, moduleid and earliest lesson status for each quiz that does not have lesson record yet
-- into @tblUserLessonStatus
Insert Into @tblUserLessonStatus
(
[UserLessonStatusID],
[UserID],
[ModuleID],
[LessonStatusID],
[DateCreated]
)
SELECT 1,
A.[UserID],
A.[ModuleID],
B.LessonStatusID,
A.DateCreated
FROM (
SELECT
A.UserID, A.ModuleID, MIN(A.DateCreated) AS ''DateCreated''
FROM
tblUserLessonStatus A, @tblUser B
WHERE
A.UserID = B.UserID
GROUP BY
A.UserID, A.ModuleID
) A , tblUserLessonStatus B WHERE

A.UserID = B.UserID AND A.ModuleID = B.ModuleID AND A.DateCreated = B.DateCreated AND
(CAST(A.UserID AS VARCHAR(10)) + CAST(A.ModuleID AS VARCHAR(10)))
NOT IN (SELECT CAST(A.UserID AS VARCHAR(10)) + CAST(A.ModuleID AS VARCHAR(10)) FROM @tblUserLessonStatus)


---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
Insert Into @tblResult
(
Unit,
[User],
Course,
Module,
[Sequence],
QuizStatus,
QuizStatusDate,	-- These columns have been reordered
QuizScore,	    -- These columns have been reordered
LessonStatus,
UnitID,
UserID,
UserName,
ExternalID,
CourseID,
ModuleID
)
Select distinct
-- General
up.HierarchyName 				As Unit, -- Unit Name
[User] = CASE u.Active when 0 then u.LastName + '' '' + u.FirstName + ''(i)'' ELSE u.LastName + '' '' + u.FirstName End , -- User Full Name
c.Name			  				As Course, -- Course Name
m.Name			  				As Module, -- Module Name
m.Sequence						As Sequence,
-- Quiz Specific
qs.Status						As QuizStatus,
dbo.udfUTCtoDaylightSavingTime(uqs.DateCreated, @organisationID) as QuizStatusDate,	-- These columns have been reordered
uqs.QuizScore 				    as QuizScore,		-- These columns have been reordered
-- Lesson Specific
ls.status 						As LessonStatus,
-- Hidden
u.UnitID						As UnitID,
u.UserID						As UserID,
u.UserName						As UserName,
u.ExternalID						As ExternalID,
c.CourseID						As CourseID,
m.ModuleID						As ModuleID
--u.Active						As Active
From @tblUserQuizStatus uqs
Inner Join tblQuizStatus qs On qs.QuizStatusID = uqs.QuizStatusID
inner Join @tblUser us 	On us.UserID = uqs.UserID
Inner Join tblUser u On u.UserID = us.UserID
INNER Join tblUnitHierarchy up On up.UnitID = u.UnitID
INNER Join tblModule m On m.ModuleID = uqs.ModuleID
INNER Join @tblCourse c On c.CourseID = m.CourseID
INNER Join @tblUserLessonStatus uls On uls.UserID = u.UserID And uls.ModuleID = m.ModuleID
INNER Join tblLessonStatus ls On ls.LessonStatusID = uls.LessonStatusID
where @effectivedate is null or (datediff(day,uqs.datecreated,@effectivedate)>=0 and datediff(day, uls.datecreated, @effectivedate)>=0)
RETURN
END
' 
END
GO
