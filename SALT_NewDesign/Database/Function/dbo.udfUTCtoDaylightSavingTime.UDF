SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[udfUTCtoDaylightSavingTime]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [udfUTCtoDaylightSavingTime]
(
@UTC DateTime,
@OrgID int
)
RETURNS DateTime
AS
BEGIN

IF (@UTC is null) RETURN null
DECLARE @OrgLocalTime datetime
DECLARE @UTC_Offset int
DECLARE @Timezone datetime
DECLARE @offset_mins int, @hours_start int, @day_start int, @week_start int, @month_start int, @hours_end int, @day_end int, @week_end int, @month_end int, @year_end int , @year_start int
SELECT @UTC_Offset = TZ.OffsetUTC , @Timezone = TZ.TimezoneID
FROM tblTimeZone TZ
INNER JOIN tblOrganisation Org ON TZ.TimeZoneID = Org.TimeZoneID
WHERE Org.OrganisationID = @OrgID
IF (@UTC_Offset IS NULL)
BEGIN
Set @OrgLocalTime = ''1 Jan 1900'' -- all results are displayed by Reporting Services so create an "error" that will be apparent in Reporting Services
END
ELSE
BEGIN
Set @OrgLocalTime = DATEADD(minute,@UTC_Offset,@UTC )
SELECT  @offset_mins = offset_mins, --get definition of the (at most) 1 definition that may cover the datetime
@hours_start = hours_start, --overlapping definitions removed by GUI so only 1 result returned
@day_start = day_start,
@week_start = week_start,
@month_start = month_start,
@hours_end = hours_end,
@day_end = day_end,
@week_end = week_end,
@month_end = month_end
FROM tblTimeZoneDaylightSavingRules
WHERE  TimezoneID = @Timezone
AND @OrgLocalTime >= first_start_date
AND @OrgLocalTime <= last_end_date

-- start with a period (@Period_start datetime, @period_end datetime) that just has the correct year digits
DECLARE @Period_start datetime, @period_end datetime
Set @year_start = year(@OrgLocalTime)
set @year_end = year(@OrgLocalTime)

if (month(@OrgLocalTime) <= @month_end) and (@month_start > @month_end) set @year_start = @year_start - 1   -- rule spans december 31 so adjust

IF(@month_start > @month_end) and (month(@OrgLocalTime) >= @month_start) set @year_end = @year_start + 1  -- rule spans december 31 so adjust


--Set @year_start = year(@OrgLocalTime) --now calculate the exact start and end dates and times for the year under consideration
--IF(@month_start > @month_end) set @year_end = @year_start+1 else set @year_end = @year_start
--DECLARE @Period_start datetime, @period_end datetime

set @Period_start = ''1 jan 2000'' -- start with a known datetime
set @year_start = @year_start - 2000
Set @Period_start = DATEADD(year,@year_start,@Period_start) -- then set the year correctly
-- Then move to the correct month
Set @Period_start = DATEADD(month,@month_start-1,@Period_start)
-- Then move to the correct week (let week 5 slide to the next month for now)
Set @Period_start = DATEADD(week,@week_start-1,@Period_start)
-- Now move FORWARD to the correct day (say) the 5th sunday of february
Declare @day_offset int
if (@day_start >=  DatePart(weekday,@Period_start) ) set @day_offset = @day_start -  DatePart(weekday,@Period_start) else  set @day_offset = @day_start -  DatePart(weekday,@Period_start) + 7
Set @Period_start = DATEADD(day,@day_offset,@Period_start)
-- We may have jumped to the next month if week = 5 so step back a week if necessary
if (DatePart(month,@Period_start) > @month_start) set @Period_start = DATEADD(week,-1,@Period_start)
Set @Period_start = DATEADD(minute,@hours_start,@Period_start)  ---TODO check if offset applied OK for 1 hour either side of daylight saving start and end

set @Period_end = ''1 jan 2000'' -- start with a known datetime
set @year_end = @year_end - 2000
Set @Period_end = DATEADD(year,@year_end,@Period_end) -- then adjust it to match the definition
Set @Period_end = DATEADD(month,@month_end-1,@Period_end)
Set @Period_end = DATEADD(week,@week_end-1,@Period_end)
if (@day_end >=  DatePart(weekday,@Period_end) ) set @day_offset = @day_end -  DatePart(weekday,@Period_end) else  set @day_offset = @day_end -  DatePart(weekday,@Period_end) + 7
Set @Period_end = DATEADD(day,@day_offset,@Period_end)
-- We may have jumped to the next month if week = 5 so step back a week if necessary
if (DatePart(month,@Period_end) > @month_end) set @Period_end = DATEADD(week,-1,@Period_end)
Set @Period_end = DATEADD(minute,@hours_end,@Period_end)  ---TODO check if offset applied OK for 1 hour either side of daylight saving start and end
Set @Period_end = DATEADD(minute,-@offset_mins,@Period_end) -- end time is quoted with daylight savings included


IF (@OrgLocalTime >= @Period_start)
AND (@OrgLocalTime < @Period_end) set @OrgLocalTime = DATEADD(minute,@offset_mins,@OrgLocalTime)
END
RETURN @OrgLocalTime
END
' 
END
GO
