<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bdw.Application.Salt.Components</name>
    </assembly>
    <members>
        <member name="T:Bdw.Application.Salt.InfoPath.PageBase">
            <summary>
            This class is used as the base class for all other pages. 
            It contains the common functions.
            The main functionality of this class is to keep the page context when a page is posted back transferred to another page.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.PageBase.LoadViewState(System.Object)">
            <summary>
            This method override the default implementation of the LoadViewState method. 
            It gets the PageContext from ViewState and save it in current request context.
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.PageBase.SaveViewState">
            <summary>
            This method override the default implementation of the SaveViewState method. 
            It gets the Page Mode from current request context and save it in ViewState.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bdw.Application.Salt.BusinessServices.Unit">
            <summary>
            Retrieves and updates unit information.
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu
            Changes:
            </remarks>
        </member>
        <member name="T:Bdw.Application.Salt.Data.DatabaseService">
            <summary>
            This is the base class of all database service classes. 
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.GetUnit(System.Int32)">
            <summary>
            Gets one Unit Details.
            </summary>
            <param name="unitID">ID of the unit</param>
            <returns>Returns a DataTable with the details of one Unit</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.Update(System.Int32,System.String,System.Boolean,System.Int32,System.DateTime,System.Int32)">
            <summary>
            Updates a unit details. If the status is changed, there will be several validation checking.
            </summary>
            <param name="unitID">ID of the unit</param>
            <param name="name">Name of the unit</param>
            <param name="active">Active/Inactive</param>
            <param name="updatedByUserID">Admin user ID that makes the update</param>
            <param name="originalDateUpdated">The original DateUpdated when the data is retrieved. It is for data integrity checking</param>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.Create(System.Int32,System.Int32,System.String,System.Boolean,System.Int32)">
            <summary>
            Add a unit
            </summary>
            <param name="organisationID"></param>
            <param name="parentUnitID">ID of the parent unit</param>
            <param name="name">Name of the unit</param>
            <param name="active">Active/Inactive</param>
            <param name="createdByUserID">Admin user ID that creates the unit</param>
            <returns>The new user ID</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.GetUsers(System.Int32)">
            <summary>
            Gets a list of users from a specific Unit.
            </summary>
            <param name="unitID">ID of the unit</param>
            <returns>A list of users</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.GetUsers(System.Int32,System.Boolean)">
            <summary>
            Gets a list of users from a specific Unit.
            </summary>
            <param name="unitID">ID of the unit</param>
            <param name="includeInactiveUsers">Include inactive users or not</param>
            <returns>A list of users</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.GetAdministrators(System.Int32)">
            <summary>
            Gets a list of existing unit administrators from a specific Unit.
            </summary>
            <param name="unitID">ID of the unit</param>
            <returns>A list of existing unit administrators</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.AddAdministrator(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Add a unit administrator to a unit
            </summary>
            <param name="unitID">ID of the unit</param>
            <param name="userID">The user who will become administrator</param>
            <param name="adminSubUnit">Whether the user has permission to administer all sub-units</param>
            <param name="adminUserID">The admin user who makes this action</param>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.RemoveAdministrator(System.Int32,System.Int32,System.Int32)">
            <summary>
            Remove a unit administrator from a unit
            </summary>
            <param name="unitID">ID of the unit</param>
            <param name="removedUserID">The user who will be removed as a unit administrator</param>
            <param name="adminUserID">The admin user who makes this action</param>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.GetUnitsByOrganisation(System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            This method is for TreeView Control. 
            It gets all units in the specified organisation and manually set the unit node attributes.
            For admin user, GetUnitsTreeByUserID() is a better method
            </summary>
            <param name="organisationID">The organisation that units belong to</param>
            <param name="disabledUnitIDs">Units that will be disabled in the TreeView Control</param>
            <param name="selectedUnitIDs">Units that will be preselected in the TreeView Control</param>
            <param name="expandedUnitIDs">Units that will be expanded in the TreeView Control</param>
            <param name="parentUnitID">The Root Units that the whole tree starts from</param>
            <returns>Returns a dataset of units. Dataset is easy to convert to xml document</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.GetUnitsTreeByUserID(System.Int32,System.Int32,System.Char)">
             <summary>
             Get all units in the specified organisation and disable the units that the admin user don't have permission to admininster
             This method is for TreeView Control. This method only returns active units.
             </summary>
             <param name="organisationID">The organisation that units belong to</param>
             <param name="userID">Admin user that logins in</param>
             <param name="permission">
            		A: [A]dministrator 
            		P: Administrator with [P]ropagating right
            		S: Administrator of the Unit and all of its [S]ub-units
            </param>
             <returns>Returns a dataset of units. Dataset is easy to convert to xml document</returns>
             <remarks>
             Assumptions: None
             Notes: 
             Author: Jack Liu, 26/02/2004
             Changes:
             </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.GetUnitsTreeByUserID(System.Int32,System.Int32,System.Char,System.Boolean)">
             <summary>
             Get all units in the specified organisation and disable the units that the admin user don't have permission to admininster
             This method is for TreeView Control. 
             </summary>
             <param name="organisationID">The organisation that units belong to</param>
             <param name="userID">Admin user that logins in</param>
             <param name="permission">
            		A: [A]dministrator 
            		P: Administrator with [P]ropagating right
            		S: Administrator of the Unit and all of its [S]ub-units
            </param>
             <param name="includeInactiveUnits">True to return all units, False to return only active units</param>
             <returns>Returns a dataset of units. Dataset is easy to convert to xml document</returns>
             <remarks>
             Assumptions: None
             Notes: 
             Author: Jack Liu, 26/02/2004
             Changes:
             </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.GetUnitsTreeByUserID(System.Int32,System.Int32,System.Char,System.Int32)">
            <summary>
            Get all units in the specified organisation and disable the units that the admin user don't have permission to admininster
            and select the unit that is passed in via the selected Unit parameter
            This method is for TreeView Control. 
            </summary>
            <param name="organisationID">The organisation that units belong to</param>
            <param name="userID">Admin user that logins in</param>
            <param name="permission">
            	A: [A]dministrator 
            	P: Administrator with [P]ropagating right
            	S: Administrator of the Unit and all of its [S]ub-units
            </param>
            <param name="selectedUnitID">The selected unit, this will be both checked and expanded until it is visible</param>
            <returns>Returns a dataset of units. Dataset is easy to convert to xml document</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale, 2/03/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.Search(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            The method will search within the selected Parent Units for those Units whose name contains the entered text.  
            (If not Parent Units have been selected, the system will search across the whole organisation.)
            </summary>
            <param name="organisationID">The ID of the organisation to search</param>
            <param name="parentUnitIDs">The comma seperated parent unit IDs that the units belongs to</param>
            <param name="unitName">The text that the units contains </param>
            <param name="userID">The user that make the query</param>
            <returns>Returns a collection of units</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            Aaron		27/03/2007		@parentUnitIDs type modified from Varchar(500)
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.Search(System.Int32,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            The method will search within the selected Parent Units for those Units whose name contains the entered text.  
            (If not Parent Units have been selected, the system will search across the whole organisation.)
            </summary>
            <param name="organisationID">The ID of the organisation to search</param>
            <param name="parentUnitIDs">The comma seperated parent unit IDs that the units belongs to</param>
            <param name="unitName">The text that the units contains </param>
            <param name="userID">The user that make the query</param>
            <param name="includeInactiveUnits">Boolean value indicating whether to return inactive units.</param>
            <returns>Returns a collection of units</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            Aaron		27/03/2007		@parentUnitIDs type modified from Varchar(500)
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.Move(System.Int32,System.Int32,System.Int32)">
            <summary>
            Move a unit to a new parent
            </summary>
            <param name="fromUnitID">The ID of the unit that will be moved</param>
            <param name="toUnitID">The ID of the unit that will be moved to</param>
            <param name="adminUserID">The user who makes this action</param>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.MoveToTopLevel(System.Int32,System.Int32)">
            <summary>
            Move a unit to top level.
            </summary>
            <param name="fromUnitID">The ID of the unit that will be moved</param>
            <param name="adminUserID">The user who makes this action</param>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.GetModuleAccess(System.Int32,System.Int32)">
            <summary>
            Gets unit module access settings
            </summary>
            <param name="unitID">ID of the unit</param>
            <param name="courseID">ID of the course</param>
            <returns>A list of module with access settings</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.SaveModuleAccess(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Saves unit module access settings
            This will overwrite the module access settings of users (Remove individual settings)
            </summary>
            <param name="unitID">ID of the unit</param>
            <param name="courseID">ID of the course</param>
            <param name="grantedModuleIDs">The list of module that are granted to this unit</param>
            <returns></returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.GetModuleRule(System.Int32,System.Int32)">
            <summary>
            Gets unit module compliance rules
            </summary>
            <param name="unitID">ID of the unit</param>
            <param name="courseID">ID of the course</param>
            <returns>A list of modules with compliance rules</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.SaveModuleRule(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Populate the compliance rules to an individual module
            </summary>
            <param name="unitID">ID of the unit</param>
            <param name="moduleID">ID of the module</param>
            <param name="usingDefault">Using the organisation's Compliance Rules defaults</param>
            <param name="lessonFrequency">The lesson frequency (month)</param>
            <param name="quizFrequency">The quiz frequency (month)</param>
            <param name="quizPassMark">quiz Pass Mark (percentage)</param>
            <param name="adminUserID">The user who makes this action</param>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.SaveModuleRuleToAll(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Populate the compliance rules to all modules in the course
            </summary>
            <param name="unitID">ID of the unit</param>
            <param name="courseID">ID of the course</param>
            <param name="lessonFrequency">The lesson frequency (month)</param>
            <param name="quizFrequency">The quiz frequency (month)</param>
            <param name="quizPassMark">quiz Pass Mark (percentage)</param>
            <param name="adminUserID">The user who makes this action</param>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.GetPermission(System.Int32,System.Int32)">
            <summary>
            Get the user permission to a specific unit
            </summary>
            <param name="unitID">ID of the unit</param>
            <param name="adminUserID">The user who is granted permission</param>
            <returns>Permission:
            	'F': Full permission
            	'A': Administer permission to this unit only
            	'P': Administer this unit and all sub-units (Populate all sub-units)
            	'' : No permission
            </returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.GetAdministrableUnitsByUserID(System.Int32,System.Int32)">
            <summary>
            Get the list of all the units that an administrator can access
            </summary>
            <param name="userID">ID of the user</param>
            <param name="organisationID">The organisation ID</param>
            <returns>Datatable:
            	
            </returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Stephen Clark, 26/08/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.ConfirmAdministrableUnitsByUserID(System.Int32,System.Int32,System.String)">
            <summary>
            Get the list of all the units that an administrator can access
            </summary>
            <param name="userID">ID of the user</param>
            <param name="organisationID">The organisation ID</param>
            <param name="units">Comma seperated list of units</param>
            <returns>Bool
            </returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Stephen Clark, 26/08/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.ReturnAdministrableUnitsByUserID(System.Int32,System.Int32,System.String)">
            <summary>
            Given a commer seperated list of units returns the subset that the given user has access to 
            in the context of the given organisation
            </summary>
            <param name="userID">ID of the user</param>
            <param name="organisationID">The organisation ID</param>
            <param name="units">Commer seperated list of units</param>
            <returns>
            commer seperated string
            </returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Stephen Clark, 26/08/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.ReturnAdministrableUnitsByUserID(System.Int32,System.Int32,System.String[])">
            <summary>
            Given a string array of units returns the subset that the given user has access to 
            in the context of the given organisation
            </summary>
            <param name="userID">ID of the user</param>
            <param name="organisationID">The organisation ID</param>
            <param name="units">Commer seperated list of units</param>
            <returns>
            commer seperated string
            </returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Stephen Clark, 26/08/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.OverrideLessonCompliance(System.Int32,System.DateTime,System.Int32)">
            <summary>
            The date or frequency months set on the organisation record is used to override all existing records
            </summary>
            <param name="organisationID"></param>
            <param name="lessonCompletionDate"></param>
            <param name="lessonFrequency"></param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Unit.OverrideQuizCompliance(System.Int32,System.DateTime,System.Int32)">
            <summary>
            The date or frequency months set on the organisation record is used to override all existing records
            </summary>
            <param name="organisationID"></param>
            <param name="lessonCompletionDate"></param>
            <param name="lessonFrequency"></param>
        </member>
        <member name="T:Bdw.Application.Salt.BusinessServices.CourseLicensing">
            <summary>
            Summary description for CourseLicensing.
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.App_Code.Data._BaseDB">
            <summary>
            Summary description for _BaseDB.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.App_Code.API.LangAPI.LanguageAdminList">
            <summary> List of languages on Admin list</summary>
        </member>
        <member name="M:Bdw.Application.Salt.App_Code.API.LangAPI.LanguageUserList">
            <summary> List of languages available to user</summary>
        </member>
        <member name="M:Bdw.Application.Salt.App_Code.API.LangAPI.SaveShowAdmin(System.Int32,System.Boolean,System.Int32)">
            <summary> Add language to Admin list</summary>
        </member>
        <member name="M:Bdw.Application.Salt.App_Code.API.LangAPI.SaveShowUser(System.Int32,System.Boolean,System.Int32)">
            <summary> Add language to User list</summary>
        </member>
        <member name="M:Bdw.Application.Salt.App_Code.API.LangAPI.GetEntity(System.Int32)">
            <summary> Get Language record </summary>
        </member>
        <member name="T:Bdw.Application.Salt.Data.DeadLockManagement">
            <summary>
            Summary description for DeadLockManagement.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.DeadLockManagement.CreateDeadlock(System.String,Bdw.Application.Salt.Data.QueryType)">
            <summary>
            Execute the specified stored procedure, with the specified result type
            </summary>
            <param name="storedProcedure">Name of procedure to run</param>
            <param name="queryType">Type of query to run</param>
            <returns></returns>
        </member>
        <member name="T:Bdw.Application.Salt.BusinessServices.Error">
            <summary>
            This class logs an error to the database via the stored procedure.
            It is called by the ErrorHandler.ErrorLog class but is required to 
            to be in the business services layer due to COM+ restraints.
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale 03/03/04
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Error.SaveToDbService(System.String,System.String,System.String,System.String,System.String,System.String,Bdw.Application.Salt.Data.ErrorLevel)">
            <summary>
            This method is essentially just saves an error to the database.
            </summary>
            <remarks>
            Assumptions:None
            Notes:
            Author: Peter Kneale, 05/02/2004
            Changes:
            </remarks>
            <param name="Source">Source Of Error</param>
            <param name="Module">Module error occured in.</param>
            <param name="Function">Function error occured in.</param>
            <param name="Code">Code error occured in.</param>
            <param name="Message">Error Message</param>
            <param name="StackTrace">Stack Trace from when error occured.</param>
            <param name="enuErrorLevel">Severity of the Error.</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Error.Update(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Update a log entry
            </summary>
            <param name="errorLogID">Log ID</param>
            <param name="errorLevel">Error Level</param>
            <param name="errorStatus">Error Status</param>
            <param name="resolution">Resolution comments</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Error.ErrorLevelList">
            <summary>
            List all error levels
            </summary>
            <returns>Datatable of Error Levels</returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Error.ErrorStatusList">
            <summary>
            List all error statuses
            </summary>
            <returns>Datatable of error status's</returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Error.GetReport(System.Int32)">
            <summary>
            Gets the datatable containing the report of the latest errors. This report
            shows the most recently occuring errors.
            </summary>
            <remarks>
            Assumptions:None
            Notes:
            Author: Peter Kneale, 05/02/2004
            Changes:
            </remarks>
            <returns>DataTable: Contains an error listing of the most recent errors</returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Error.GetError(System.Int32,System.Int32)">
            <summary>
            Gets the error
            </summary>
            <remarks>
            Assumptions:None
            Notes:
            Author: Peter Kneale, 05/02/2004
            Changes:
            </remarks>
            <returns>DataTable: Contains an error</returns>
        </member>
        <member name="T:Bdw.Application.Salt.BusinessServices.Application">
            <summary>
            This class handles application specific functions
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Application.GetDatabaseVersion">
            <summary>
            Gets SQL Server version
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Application.GetDateModuleStatusUpdateLastRun(System.Int32)">
            <summary>
            Gets time the Module Status Update job was last run
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Gavin Buddis, 24/03/2004
            Changes:
            #1 19/4/04 Returns DateTime.Minvalue if it has never been run before
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Application.GetSqlAgentRunningStatus">
            <summary>
            Gets time the Module Status Update job was last run
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Gavin Buddis, 24/03/2004
            Changes:
            #1 19/4/04 Returns DateTime.Minvalue if it has never been run before
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Application.RunModuleStatusUpdate(System.Int32)">
            <summary>
            Simulates the running of the Module Status Update job by calling 2 stored procedures
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Gavin Buddis, 24/03/2004
            Changes:
            </remarks>
        </member>
        <member name="T:Bdw.Application.Salt.App_Code.Data.LangResourceDB">
            <summary>
            Summary description for LangDB.
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.BusinessServices.ESTimeZone">
            <summary>
            Retrieves and updates timezone information.
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.ESTimeZone.GetTimeZoneList">
            <summary>
            Gets a list of TimeZones.
            </summary>
            <returns>Returns a DataTable with the details of all TimeZones in the SALT database.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.ESTimeZone.AddNewTimeZones">
            <summary>
            Updates the TimeZone list with new TimeZones from the registry of the WebServer
            </summary>
            <returns>.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.ESTimeZone.AddTimeZone(System.Data.SqlTypes.SqlString,System.Int32,System.Data.SqlTypes.SqlString)">
            <summary>
            Adds a single TimeZone to the TimeZone list 
            </summary>
            <returns>.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.HTMLSanitizer.Sanitize(System.String)">
            <summary>
            sanitize any potentially dangerous tags from the provided raw HTML input using 
            a whitelist based approach, leaving the "safe" HTML tags
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.HTMLSanitizer.IsMatch(System.String,System.String)">
            <summary>
            Utility function to match a regex pattern: case, whitespace, and line insensitive
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.HtmlToPdf.WKHtmlToPdf(System.String)">
            <summary> 
            Convert Html page at a given URL to a PDF file using open-source tool wkhtml2pdf 
            </summary> 
            <param name="Url"></param> 
            <param name="outputFilename"></param> 
            <returns></returns> 
        </member>
        <member name="T:Bdw.Application.Salt.InfoPath.ControlFile">
            <summary>
            Summary description for ControlFile.
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.Data.StoredProcedure">
            <summary>
            This class provides common access interface to the SQL server database.  It simplifies database access and centrally controls database connection.
            All database accesses must use stored procedures. 
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.#ctor(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Constructor for the stored procedure class
            </summary>
            <param name="name">Name of the stored procedure</param>
            <param name="parameters">SQL Parameters passed in via the parameters parameter</param>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.Finalize">
            <summary>
            Dispose of the stored procedure
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.Dispose">
            <summary>
            Dispose of the instantiated object.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.ExecuteNonQuery">
            <summary>
            Executing this stored procedure.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.ExecuteReader">
            <summary>
            Executing this stored procedure, Return SqlData reader
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.ExecuteXMLReader">
            <summary>
            Executing this stored procedure, Return XML reader
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.ExecuteScalar">
            <summary>
            Executes the stored procedure and returns the first field of the first record
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.ExecuteTable">
            <summary>
            Executing this stored procedure, fill in a DataTable with the result 
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.ExecuteDataSet">
            <summary>
            Executing this stored procedure, fill in a DataSet with the result 
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.ExecuteSingleQuery(Bdw.Application.Salt.Data.QueryType)">
            <summary>
            Execute a Single Query based on the queryType provided
            </summary>
            <param name="queryType">Query Type value from enum</param>
            <returns>Object containing the resultset</returns>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.ExecuteDeadlockSafeQuery(Bdw.Application.Salt.Data.QueryType)">
            <summary>
            Execute a query and retry several times if deadlocked
            </summary>
            <param name="queryType">QueryType based on enum</param>
            <returns>Result set of query</returns>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.ToString">
            <summary>
            Returns a string representation of the stored procedure, the string can be executed in query analyser
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.CreateInputParam(System.String,System.Data.SqlDbType)">
            <summary>
            Creates an input parameter
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="sqlType">sqlType of the parameter</param>
            <returns>A new sql parameter.</returns>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.CreateInputParam(System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            Creates an input parameter with a value
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="sqlType">sqlType of the parameter</param>
            <param name="val">Value of the parameter</param>
            <returns>A new sql parameter.</returns>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.CreateInputParam(System.String,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            Creates an input parameter with a value and a length
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="sqlType">sqlType of the parameter</param>
            <param name="val">Value of the parameter</param>
            <param name="length"></param>
            <returns>A new sql parameter.</returns>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.CreateInputParam(System.String,System.Data.SqlDbType,System.Int32,System.Int32,System.Object)">
            <summary>
            Creates an input parameter with a scale, precision and a length
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="sqlType">sqlType of the parameter</param>
            <param name="precision">Precison of the value</param>
            <param name="scale">Scale of the value</param>
            <param name="val">Value of the parameter.</param>
            <returns>A new sql parameter.</returns>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.CreateOutputParam(System.String,System.Data.SqlDbType)">
            <summary>
            Creates a new output parameter
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="sqlType">sqlType of the parameter</param>
            <returns>A new sql parameter.</returns>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.CreateOutputParam(System.String,System.Data.SqlDbType,System.Int32)">
            <summary>
            Creates a new output parameter 
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="sqlType">sqlType of the parameter</param>
            <param name="length">Length of the parameter</param>
            <returns>A new sql parameter.</returns>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.CreateOutputParam(System.String,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            Creates a new output parameter of a certain length and value
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="sqlType">sqlType of the parameter</param>
            <param name="length">Length of the parameter</param>
            <param name="val">Value of the new parameter</param>
            <returns>A new sql parameter.</returns>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.CreateOutputParam(System.String,System.Data.SqlDbType,System.Int32,System.Int32,System.Object)">
            <summary>
            Creates a new output parameter
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="sqlType">sqlType of the parameter</param>
            <param name="precision">Precison of the value</param>
            <param name="scale">Scale of the value</param>
            <param name="val">Value of the parameter.</param>
            <returns>A new sql parameter.</returns>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.CreateReturnParam(System.String,System.Data.SqlDbType)">
            <summary>
            Creates a new return parameter 
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="sqlType">sqlType of the parameter</param>
            <returns>A new sql parameter.</returns>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.CreateReturnParam(System.String,System.Data.SqlDbType,System.Int32)">
            <summary>
            Creates a new return parameter 
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="sqlType">sqlType of the parameter</param>
            <param name="length">Length of the parameter</param>
            <returns>A new sql parameter.
            </returns>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.CreateReturnParam(System.String,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            Creates a new return parameter 
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="sqlType">sqlType of the parameter</param>
            <param name="length">Length of the parameter</param>
            <param name="val">Value of the parameter.</param>
            <returns>A new sql parameter.</returns>
        </member>
        <member name="M:Bdw.Application.Salt.Data.StoredProcedure.GetDeadLockResolutionWaitTime">
            <summary>
            Gets a random number between the two DeadLockResolution Wait Times defined in Web.Config
            </summary>
            <returns>A random wait time.</returns>
        </member>
        <member name="P:Bdw.Application.Salt.Data.StoredProcedure.Parameters">
            <summary>
            Returns a collection of parameters attached to command object
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.Data.StoredProcedure.ProcedureName">
            <summary>
            Returns the name of the procedure
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.Data.StoredProcedure.ConnectionString">
            <summary>
            Sets and returns the connectionstring
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.InfoPath.Publisher">
            <summary>
            This class provides additional methods to assist with the publishing process
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.Publisher.GetStyles(System.String)">
            <summary>
            Returns an array list of all directories within the Styles directory 
            to allow a use to choose a style with which to publish their content
            </summary>
            <param name="path">Path to search</param>
            <returns></returns>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.Publisher.GetLayouts(System.String)">
            <summary>
            Returns an array list of all xslt files within the Layouts directory 
            to allow a use to choose a layout with which to publish their content
            Files that begin with an underscore are ignored.
            </summary>
            <param name="path">Path to search</param>
            <returns></returns>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.Publisher.GetPages(System.String)">
            <summary>
            Get Pages for layout design
            </summary>
            <param name="xmlFile">The InfoPath xml file</param>
            <returns></returns>
        </member>
        <member name="T:Bdw.Application.Salt.InfoPath.DefaultLesson">
            <summary>
            This is the code-behind class for all lesson rendering pages (Default.aspx),
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.DefaultLesson.CreateContext">
            <summary>
            Create context when the lesson starts
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.DefaultLesson.RenderPageContent">
            <summary>
            Render the page content
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.DefaultLesson.HandlePageEvents(System.String,System.String)">
            <summary>
            Handle page events when the page is posted back
            </summary>
            <param name="eventName"></param>
            <param name="eventArgument"></param>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.DefaultLesson.Lesson_Load">
            <summary>
            Lesson load event
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.DefaultLesson.Page_Load">
            <summary>
            Page Load event
            </summary>
            <remarks>
            This event fires when a user goes to a page. It is used to track a user’s progress through a lesson and determine when they have completed their training requirement.
            The event will call the Toolbook.RecordPageVisited method.
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.DefaultLesson.Lesson_End">
            <summary>
            Lesson End event
            </summary>
            <remarks>
            A user can exit a lesson at any point by clicking on the Exit button.  Alternatively, when they reach the end of a lesson they will be presented with a screen indicating they have completed the lesson for the current module and provide a link to exit the lesson.  Any of these 2 actions will trigger the Lesson_OnExit event.
            The event will call the Toolbook.EndLessonSession method by passing the following parameters:
            	.Bookmark: The bookmark is the current page ID. 
            				If they selected the Exit button on any page other than the last page the book mark parameter will be sent. 
            				If the user selects to exit on the last page by pressing the exit button in the toolbar a bookmark parameter should not be sent to the SALT LMS as part of the event.
            	.Duration: The system needs to keep track of the duration of a lesson. The duration, in seconds as an integer needs to be supplied as part of the EndLessonSession method of objToolBook. 
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.DefaultLesson.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication">
            <summary>
            Summary description for IContentObjectCommunication.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.UploadContentObjectXML(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlString)">
            <summary>
            This method loads the new XML content into the relevant tables.
            </summary>
            <param name="contentXml">A string containg the new xml content</param>
            <param name="userID">The userID of the user uploading this new content.</param>
            <param name="moduleID">The module for which this content is to be used.</param>
            <param name="courseID">The course for which this content is to be used.</param>
            <param name="toolLocation">The Location (path) for this Content Module</param>
            <returns>
            A Dataset containing information regarding the success of the upload. For
            further information please see the stored procedure.
            </returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.UploadContentObjectXMLPreview(System.String,System.Int32,System.Int32)">
            <summary>
            This method previews the new XML content without loading it into the database.
            It validates that the xml content is valid in compared to the existing salt database content.
            </summary>
            <param name="contentXml">A string containg the new xml content</param>
            <param name="moduleID">The module for which this content is to be used.</param>
            <returns>
            DataSet containing the results of the attempted validation. See
            See the stored procedure for more information
            </returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.CreateQuizQuestionAudit(System.String,System.String)">
            <summary>
            This method creates a new quiz audit entry that indicates a person has attempted a quiz.
            </summary>
            <param name="sessionID">The session id of the Quiz Session</param>
            <param name="ContentObjectPageID">The Content Module Page ID of the quiz attempted by the person</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.CreateQuizAnswerAudit(System.String,System.String,System.Int32)">
            <summary>
            This method creates a new QuizAnswer audit entry that indicates a person has answered a question.
            </summary>
            <param name="sessionID">The session id of the Quiz Session</param>
            <param name="ContentObjectPageID">The Content Module Page ID of the question attempted by the person</param>
            <param name="quizAnswerID">The answer selected by the person</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.EndQuizSession(System.String,System.Int32,System.Int32)">
            <summary>
            This method creates a new QuizAnswer audit entry that indicates a person has answered a question.
            </summary>
            <param name="quizSessionID">The session id of the Quiz Session, unique GUID that identifies this Content Module quiz session</param>
            <param name="duration">The duration in seconds of the quiz as messured by Content Module</param>
            <param name="score">The score as mesured by Content Module</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.GetModuleIDBySessionID(System.String)">
            <summary>
            This method returns the ModuleID of the module that the session is linked to.
            </summary>
            <param name="sessionID">ID of the session.</param>
            <returns>ID of the associated module.</returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.BeforeQuizStart(System.Int32,System.Int32)">
            <summary>
            BeforeQuizStart - Prepears to start a unique quiz - returns a GUID
            </summary>
            <returns>DataTable containing values necessary to launch the Content Module.</returns>
            <param name="userID">The User attempting the Quiz.</param>
            <param name="moduleID">The module the User is attempting.</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.StartQuiz(System.String)">
            <summary>
            Starts a quiz session for a particular user attempting a particular quiz.
            </summary>
            <returns> A boolean value indicating whether the session started successfully or not.
            </returns>
            <param name="QuizSessionID">User ID of the user starting the quiz.</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.GetQuizIDBySessionID(System.String)">
            <summary>
            This method returns a Quiz ID from a Content Module ID
            </summary>
            <param name="sessionID">The session ID from which to get the Quiz ID</param>
            <returns>QuizID</returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.GetUserIDBySessionID(System.String)">
            <summary>
            This method returns a users User ID based on a current Sesion Id.
            </summary>
            <param name="SessionID">The session ID from which to get the User ID</param>
            <returns>UserID of the user matching the sessionid </returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.GetUnitIDByUserID(System.Int32)">
            <summary>
            This method returns a users Unit ID based on their UserID
            </summary>
            <param name="UserID">UserID of desired user.</param>
            <returns>UnitID of the Unit that the user belongs to.</returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.GetQuizPassMark(System.Int32,System.Int32)">
            <summary>
            Gets the pass mark of the quiz that belongs to the specified Unit and Module.
            </summary>
            <param name="UnitID">UnitID that the quiz belongs to.</param>
            <param name="ModuleID">ModuleID that the quiz belongs to.</param>
            <returns></returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.GetQuizQuestionsCountByQuizID(System.Int32)">
            <summary>
            This method returns the number of questions in a particular quiz.
            </summary>
            <param name="QuizID">QuizID of the Quiz that we wish to could the questions in.</param>
            <returns>The number of questions.</returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.ValidateAccess(System.Int32,System.Int32)">
            <summary>
            ValidateAccess
            </summary>
            <returns>Returns true if a user can access a module.</returns>
            <param name="userID">integer containg the user id</param>
            <param name="moduleID">integer containg the module id</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.BeforeLessonStart(System.Int32,System.Int32)">
            <summary>
            BeforeLessonStart - Prepears to start a unique lesson - returns a GUID
            </summary>
            <returns>DataTable containg the GUID for the session</returns>
            <param name="userID">integer containg the user id</param>
            <param name="moduleID">integer containg the module id</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.StartLesson(System.Data.SqlTypes.SqlString)">
            <summary>
            StartLesson - updates a prepared lesson, starts it if it has not already been started and return true, else return false
            </summary>
            <returns>Returns true if a session has not been strated before</returns>
            <param name="sessionID">String containg the session GUID</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.SessionIsUnique(System.Data.SqlTypes.SqlString)">
            <summary>
            SessionIsUnique
            </summary>
            <returns>Returns true if a session has not been used before</returns>
            <remarks>
            Assumptions: None
            Notes:
             this function is to ensure that the lesson onload event only fires once
             for each Content Module - and that no attempt is made (ie hitting the 
             back / forward button) to restart a lesson
            Author: Stephen Kennedy-Clark, 03/02/0/2004
            Changes:
            </remarks>
            <param name="sessionID">String containg the session GUID</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.GetPagesVisited(System.Data.SqlTypes.SqlString)">
            <summary>
            GetPagesVisited
            </summary>
            <returns>Returns a data table of pages that the user has visited in this Content Module</returns>
            <param name="sessionID">String containg the session GUID</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.RecordPageVisited(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
            <summary>
            RecordPageVisited
            </summary>
            <returns>Returns boolean true if the lesson was not already finished and the page visited exists in the Content Module</returns>
            <remarks>
            Assumptions: None
            Notes:
             This function records the fact that a student has visited a page in the Content Module
             it requires the Content Module Page ID and the SessionID
             The underlying stored proc will not accept the page if the lesson has already been finished
             or if salt cannot match the pageID to a page in the lesson
            </remarks>
            <param name="sessionID">String containg the session GUID</param>
            <param name="pageID">Integer containg the page id</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.GetBookmark(System.Data.SqlTypes.SqlString)">
            <summary>
            GetBookmark
            </summary>
            <returns>Returns the Content Module Page ID for the page in the current Content Module that a user has set</returns>
            <remarks>
            Assumptions: None
            Notes:
            Author: Stephen Kennedy-Clark, 03/02/0/2004
            Changes:
            </remarks>
            <param name="sessionID">String containg the session GUID</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.EndLessonSession(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlString)">
            <summary>
            EndLessonSession
            </summary>
            <param name="sessionID">String containg the session GUID</param>
            <param name="duration">Integer - The number of seconds that the lesson was running</param>
            <param name="bookmark">string containg teh Content Module page id to be bookmarked</param>
            <returns>Return true if the lesson was ended sucessfully</returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.GetUser(System.Data.SqlTypes.SqlString)">
            <summary>
            GetUser
            </summary>
            <returns>
            Returns the user's first and last names concatenated with a space
            </returns>
            <param name="sessionID">String containg the session GUID</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.BeforeQuizEnd(System.String,System.Int32,System.Int32)">
            <summary>
            BeforeQuizEnd - Prepears to end a unique quiz 
            </summary>
            <param name="quizSessionID">The unique quiz session ID.</param>
            <param name="duration">The duration in seconds.</param>
            <param name= "score">The score as mesured by toolbook</param>
            <returns>
             Returns a data table contains information needed to end a quiz
            </returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.IContentObjectCommunication.EndQuizSession_UpdateTables(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime)">
            <summary>
            EndQuizSession_UpdateTables
            </summary>
            <param name="quizSessionID">The session id of the Quiz Session, unique GUID that identifies this toolbook quiz session</param>
            <param name="duration">The duration in seconds of the quiz as messured by toolbook</param>
            <param name="score">The score as mesured by toolbook</param>
            <param name="userID">The user who took the quiz</param>
            <param name="quizID">The quiz ID</param>
            <param name="passMark">The quiz pass mark</param>
            <param name="unitID">The user's unit ID</param>
            <param name="moduleID">The module ID</param>
            <param name="courseID">The course ID</param>
            <param name="oldCourseStatus">The old course ID</param>
            <param name="newQuizStatus">The new quiz status ID</param>
            <param name="newCourseStatus">The new course status ID</param>
            <param name="quizFrequency">The quiz frequency </param>
        </member>
        <member name="T:Bdw.Application.Salt.BusinessServices.Report">
            <summary>
            Retrieves Report information.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Report.GetIndividualReport(System.Int32)">
            <summary>
            Gets the details for the individual Report
            </summary>
            <returns>Returns a DataTable with the details of all Modules in all courses a user has access to</returns>
            <remarks>
            Assumptions: That the table tblUserQuizStatus contains the latest valid results
            Notes: 
            Author: Stephen K-Clark, 16/02/04
            Changes:
            </remarks>
            <returns>
            DataTable containg the report
            </returns>
            <param name="userID">User ID</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Report.GetTrendReport(System.Int32,System.String,System.Int32)">
            <summary>
            Gets the details for the Trend Report
            </summary>
            <returns>Returns a DataTable with the details of the average score and number of users for a selected course and unit/s</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale 18/02/2004
            Changes:
            </remarks>
            <param name="organisationID">organisation to return units from if no unit was selected</param>
            <param name="unitIDs">Comma seperated list of unit ID's</param>
            <param name="courseID">A single course ID.</param>
            
            <returns></returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Report.GetAdminSummaryReport(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the details for the Summary Report
            </summary>
            <returns>Returns a DataTable/DataSet with summary data relating to the users and courses.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale 3/02/2004
            Changes:
            </remarks>
            <param name="organisationID"></param>
            <param name="unitIDs">Comma seperated list of unit id's</param>
            <param name="courseIDs">Comma seperated list of course id's</param>
            <param name="userFirstName">The entered users first name</param>
            <param name="userLastName">The entered users last name</param>
            <param name="effectiveDate">Nullable date at which the report is accurate</param>
            <param name="groupBy">Group by 'Course' or 'Unit/User'</param>
            <param name="sortBy">Sort by 'QuizScore' or 'QuizDate'</param>
            <param name="adminUserID">Administrator ID of the logged in user.</param>
            <param name="classificationID">Classification ID or zero for any</param>
            <param name="IncludeInactiveUsers">Include Inactive Users</param>
            <returns>DataTable containing admin summary results</returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Report.GetCompletedUsersReport(System.Int32,System.String,System.Int32,System.DateTime,System.Boolean)">
            <summary>
            This report returns a table of users that have completed testing requrements or alternatly, thoes who have not.
            </summary>
            <remarks>
            Assumptions: If a user has access to a module then thay have to complete that module
            Notes: 
            Author: Stephen Kennedy-Clark 19/02/2004
            Changes:
            </remarks>
            <returns>
            DataTable containg the completed users report data
            </returns>
            <param name="organisationID">Organisation to search if no units were specified</param>
            <param name="unitIDs">Comma seperated list of unit id's</param>
            <param name="courseID">Integer Course ID</param>
            <param name="completed">Boolean - Show Completed (true) or incomplete (false) users</param>
            <param name="effectiveDate">Nullable date at which the report is accurate</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Report.GetEmailReportUserSearch(System.Int32,System.String,System.String,System.Int32,System.Int32,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            This method performs the search necessary to find the users based on the criteria supplied for by the email report.
            </summary>
            <param name="organisationID">Organisation to search if no units specified</param>
            <param name="unitIDs">Comma seperated list of unit ids.</param>
            <param name="courseID">The Course ID.</param>
            <param name="classificationID">The Classification ID or 0 for any classification</param>
            <param name="courseModuleStatus">The Course/Module Status.</param>
            <param name="quizDateFrom">From Date</param>
            <param name="quizDateTo">To Date</param>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale 1/03/2004
            Changes:
            </remarks>
            <returns>DataTable of user details that match the supplied criteria</returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Report.GetEmailReportToAdministrators(System.Int32,System.String,System.String,System.Int32,System.Int32,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            This method returns a datatable of users and their email addresses based on an organisation 
            ID and a comma seperated list of user id's
            </summary>
            <param name="organisationID">A single Organisation ID</param>
            <param name="userIDs">A comma seperated list of user ID's</param>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale 1/03/2004
            Changes:
            </remarks>
            <returns>DataTable containing user details and email addresses</returns>
        </member>
        <member name="T:Bdw.Application.Salt.BusinessServices.Policy">
            <summary>
            Summary description for Policy.
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.Utilities.XMLLoader">
            <summary>
            The XMLLoader class is an abstract class that creates the basic class structure for uploading XML documents.
            This class also provides the facility to validate the XML document against a specified XSD file.
            </summary>
            <remarks>
            Assumptions: XSD file is a valid XSD file.
            Notes:
            Author: Peter Vranich, 28/01/0/2004
            Changes:
            </remarks>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.XMLLoader.p_strXMLFile">
            <summary>
            Stores the path and filename of the XML file to be loaded.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.XMLLoader.p_strXSDFile">
            <summary>
            Stores the path and filename of the XSD file that the XML file will be validated against.
            </summary>
            <remarks> This is optional if you do not wish to validate the XML document.</remarks>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.XMLLoader.p_strNameSpace">
            <summary>
            Stores the namespace used in the XML file.
            </summary>
            <remarks> This is optional if you do not wish to validate the XML document.</remarks>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.XMLLoader.p_objValidationResult">
            <summary>
            Stores the validation result structure.
            </summary>
            <remarks> This is optional if you do not wish to validate the XML document.</remarks>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.XMLLoader.#ctor">
            <summary>
            Default constructor for this class.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.XMLLoader.#ctor(System.String)">
            <summary>
            Use this constructor if you only wish to upload an XML document without validating it first.
            </summary>
            <param name="XMLFile"> Path and filename of the XML file to be loaded.</param>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.XMLLoader.#ctor(System.String,System.String,System.String)">
            <summary>
            Mandatory fields constructor.
            Use this constructor if you wish to validate the XML document.
            </summary>
            <param name="XMLFile"> Path and filename of the XML file to be loaded.</param>
            <param name="XSDFile"> Path and filename of the XSD file that the XML file will be validated against.</param>
            <param name="Namespace"> Namespace of the XML document collection.</param>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.XMLLoader.Load">
            <summary>
            This is an abstract method that must be overriden in the inhereting class.
            </summary>
            <returns>A DataSet with any errors that may have occured at the database level.</returns>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.XMLLoader.Validate">
            <summary>
            This metod Validates an XML document via the XMLValidator class.
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.Utilities.XMLLoader.XMLFile">
            <summary>
            Gets or Sets the file and path of the XML document to be loaded.
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.Utilities.XMLLoader.XSDFile">
            <summary>
            Gets or Sets the filename and path of the XSD file to be used for validation if required.
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.Utilities.XMLLoader.NameSpace">
            <summary>
            Gets or sets the Namespace of the XML document collection.
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.Utilities.XMLLoader.ValidationResult">
            <summary>
            Gets or Sets the result of the XML validation process.
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.Utilities.GeneralUtilities">
            <summary>
            Summary description for General.
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.InfoPath.QuizPageContext">
            <summary>
            Summary description for QuizPageContext.
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.InfoPath.PageContext">
            <summary>
            The base class of current page context
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.InfoPath.PageContext.m_strPath">
            <summary>
            The private fields will be serialized and saved in the ViewState
            For perfomance purpose, minimize the information to be stored
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.InfoPath.PageContext.m_intPageIndex">
            <summary>
            This is the index of the current page, the value is the index of am_intPagesShown
            For Lesson, the page index is the same as page index in control file
            For Quiz, the page index is different from page index in control file
            	For example: If a page index is 5, the actual page index in control file may be 10
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.InfoPath.PageContext.am_intPagesShown">
             <summary>
             This is the list of pages that will be shown to the user. The value is page index in the control file.
              For Lesson, the number of pages and orders are the same as pages in control file.
            	 For Quiz, the number of questions will be randomly selected. the number of pages and order are different from pages in control file.
             </summary>
             <example>
             1) Lesson:
             A Lesson contains 13 Pages
             The page index will be:  0,1,2,3,4,5,6,7,8,9,10,11,12 
             The am_intPagesShown will be: 0,1,2,3,4,5,6,7,8,9,10,11,12
             2) Quiz:
             A Quiz contains 2 introduction pages, 10 questions, 1 complete page
             The page index will be:  (Introduction)0,1,(Questions)2,3,4,5,6,7,8,9,10,11,(Complete)12 
             If the number of questions requested is 4, the value of am_intPagesShown may be: (Introduction)0,1, (Questions) 7,11,3,10, (Complete) 12
            </example>
        </member>
        <member name="P:Bdw.Application.Salt.InfoPath.PageContext.Current">
            <summary>
            Gets or sets the current page context.
            Page context is set when the Lesson.aspx or Quiz.aspx is loaded. It is stored in the ViewState.
            It can be used to organize and share data between page and user controls during an HTTP request.
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.InfoPath.PageContext.SessionID">
            <summary>
            Get the current session ID
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.InfoPath.PageContext.Path">
            <summary>
            Gets or sets the path of the lesson or quiz.
            It is stored in the ViewState
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.InfoPath.PageContext.IsPreviewMode">
             <summary>
             Is the current mode preview
             </summary>
            <remarks>
             If true then no events fire.
             If false then events fire.
            </remarks>
        </member>
        <member name="P:Bdw.Application.Salt.InfoPath.PageContext.StartTime">
            <summary>
            Gets or set the time that the lesson or quiz was started.
            It is stored in the ViewState,
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.InfoPath.PageContext.Title">
            <summary>
            Get the Title of the current module
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.InfoPath.PageContext.PageCount">
            <summary>
            Get the page count of the current module
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.InfoPath.PageContext.Style">
            <summary>
            Get the presentation style of the current module
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.InfoPath.PageContext.DataFile">
            <summary>
            Gets the current control file
            It is stored in the Cache
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.InfoPath.PageContext.ControlFile">
            <summary>
            Gets the current control file
            It is stored in the Cache
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Bdw.Application.Salt.InfoPath.PageContext.PageIndex" -->
        <member name="P:Bdw.Application.Salt.InfoPath.PageContext.PageID">
            <summary>
            Gets the current page id
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.InfoPath.PageContext.Layout">
            <summary>
            Gets the current page layout
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.InfoPath.PageContext.PageType">
            <summary>
            Gets the current page type
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.InfoPath.PageContext.IsFirstPage">
            <summary>
            Is the current page the first page
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.InfoPath.PageContext.IsLastPage">
            <summary>
            Is the current page the last page
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.InfoPath.PageContext.ControlFilePage">
            <summary>
            Get the current page control data, including pageID, layout and page type
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.QuizPageContext.OrderPages">
             <summary>
             Gets a list of Page to  be shown to the user. it maps to ControlFile.Pages;
             It is stored in ViewState, and used for navigation control.
             When a quiz is loaded, the list of page index will include:
            		.All introduction pages
            		.The number of question pages that are randomly selected (specified by querystring)
            		.All Complete pages
             </summary>
             <example>
             A Quiz contains 2 introduction pages, 10 questions, 1 complete page
             The page index will be:  (Introduction)1,2,(Questions)3,4,5,6,7,8,9,10,11,12,(Complete)13 
             If the number of questions requested is 4, the pages selected may be: (Introduction)1,2, (Questions) 7,11,3,10, (Complete) 13
            </example>
        </member>
        <member name="P:Bdw.Application.Salt.InfoPath.QuizPageContext.QuestionCount">
            <summary>
            Get the number of questions to be shown to the user
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.InfoPath.QuizPageContext.Answers">
            <summary>
            Gets a list of answer ID that the student has selected.
            The value is stored in ViewState.
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.InfoPath.QuizPageContext.QuestionIndex">
            <summary>
            Get the currrent question index
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.InfoPath.QuizPageContext.Answer">
            <summary>
            Gets or sets the answer ID of the current question
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.InfoPath.LessonPageContext">
            <summary>
            Summary description for LessonPageContext.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.LessonPageContext.OrderPages">
            <summary>
            Gets a list of Page to  be shown to the user. it maps to ControlFile.Pages;
            It is stored in ViewState, and used for navigation control.
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.InfoPath.LessonPageContext.BookmarkPageID">
            <summary>
            Gets or sets the bookmark page ID
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.App_Code.Entity.LangResource">
            <summary>
            Summary description for LangResource.
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.App_Code.Entity._BaseEntity">
            <summary>
            Summary description for _Base.
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.App_Code.Data.LangInterfaceDB">
            <summary>
            Summary description for LangDB.
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.Utilities.ImportToolbook">
            <summary>
            Summary description for ImportUsers.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.ImportToolbook.m_intID">
            <summary>
            The ID.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.ImportToolbook.m_intUserID">
            <summary>
             ID of user inporting the User xmlData.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.ImportToolbook.m_intModuleID">
            <summary>
             ModuleID of the module to import the content to.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.ImportToolbook.m_intCourseID">
            <summary>
             CourseID of the module to import the content to.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.ImportToolbook.m_strToolbookLocation">
            <summary>
            Relative path to the toolbook file 
            </summary>
            <example>m_strToolbookLocation = "/General/Toolbook/Content/1/4/Quiz/index.html"</example>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.ImportToolbook.#ctor">
            <summary>
            Default constructor for this class
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.ImportToolbook.#ctor(System.String)">
            <summary>
            Use this constructor if you only wish to upload an XML document without validating it first.
            </summary>
            <param name="XMLFile"> Path and filename of the XML file to be loaded.</param>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.ImportToolbook.#ctor(System.String,System.String,System.String)">
            <summary>
            Mandatory fields constructor.
            Use this constructor if you wish to validate the XML document.
            </summary>
            <param name="XMLFile"> Path and filename of the XML file to be loaded.</param>
            <param name="XSDFile"> Path and filename of the XSD file that the XML file will be validated against.</param>
            <param name="Namespace"> Namespace of the XML document collection.</param>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.ImportToolbook.Load">
            <summary>
            This method validates an XML document against a speciied XSD.  It then loads data from the XML document
            into the users table via the LoadUserXML method in the User class.
            </summary>
            <returns>DataSet with any errors that may have been generated at the database level.</returns>
            <remarks>This method overrides the base method <see cref="M:Bdw.Application.Salt.Utilities.XMLLoader.Load"/>.</remarks>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.ImportToolbook.Preview">
            <summary>
            Preview the xml content and validate it
            </summary>
            <returns>Dataset containing the results of the preview stored procedure.</returns>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.ImportToolbook.GetXMLData(System.String)">
            <summary>
            
            </summary>
            <param name="xmlFile"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.ImportToolbook.SetRootElement(System.String)">
            <summary>
            
            </summary>
            <param name="xmlData"></param>
            <returns></returns>
        </member>
        <member name="P:Bdw.Application.Salt.Utilities.ImportToolbook.ID">
            <summary>
            Gets or Sets either the ID.
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.Utilities.ImportToolbook.UserID">
            <summary>
            Gets or Sets the ID of user inporting the Toolbook Content xmlData.
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.Utilities.ImportToolbook.ModuleID">
            <summary>
            Gets or Sets the Module ID to import the Toolbook Content xmlData into.
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.Utilities.ImportToolbook.CourseID">
            <summary>
            Gets or Sets the Course ID to import the Toolbook Content xmlData into.
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.Utilities.ImportToolbook.ToolbookLocation">
            <summary>
            Gets or Sets the Course ID to import the Toolbook Content xmlData into.
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.InfoPath.Importer">
            <summary>
            This class accepts an info path xml file and generates an xml file necessary for use in salt.
            It adds guids to all elements
            It extracts the images as gif's and replaces their base64 text with a file name.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.InfoPath.Importer.m_strSystemPath">
            <summary>
            This needs to be the full path to where the Infopath system files are located
            ie.D:\Work\Salt v3.0\Source\WebSite\General\InfoPath\
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.InfoPath.Importer.m_strOutputPath">
            <summary>
            This needs to be the full path to the directory where new file are to be written.
            ie. D:\Work\Salt v3.0\Source\WebSite\General\InfoPath\Publishing\af71cbe7-55f5-46e1-b724-a3d3090062e2\
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.Importer.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor that accepts the info path file as its only parameter
            </summary>
            <param name="document">The InfoPath generated XML File</param>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.Importer.Convert(System.String,System.String)">
            <summary>
            Performs all necessary steps to convert an infopath xml data file
            into the necessary type requried by salt.
            </summary>
            <param name="outputPath">Writes out all generated files to the output path. </param>
            <param name="translationPath">Finds the necessary XSLTs in the translation path</param>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.Importer.RemoveInactivePages">
            <summary>
            Removes all pages that are inactive
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.Importer.AddGUIDs">
            <summary>
            Add GUIDS to each element in the xml document
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.Importer.AddGUIDs(System.Xml.XmlNode)">
            <summary>
            Recursive function to add GUIDS to each element in the xml document
            </summary>
            <param name="node">Node to start at</param>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.Importer.SaveImages">
            <summary>
            Extracts all images and saves them as gif files
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.Importer.AddXHTML">
            <summary>
            Renders each of the individual widgets and places html back in to the xml document
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.Importer.GenerateXHTML(System.Xml.XmlNode)">
            <summary>
            This method takes an xml node, uses an xslt translation to translate it to xhtml
            and then replaces the nodes text with the result
            Node: The xslt used is of the same name as the Page Element's name.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.Importer.CopyTemplate">
            <summary>
            Copies TemplateLesson.aspx if the content is a lesson
            Copies TemplateQuiz.aspx if the content is a lesson
            This is the file that the user actually hits when sitting a lesson or quiz
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.Importer.SaveDataFile">
            <summary>
            Saves the newly generated data file
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.Importer.IsLesson">
            <summary>
            Checks if a piece of content being uploaded is a lesson or a quiz
            </summary>
            <returns>True for lesson, false for quiz</returns>
        </member>
        <member name="T:Bdw.Application.Salt.InfoPath.DefaultQuiz">
            <summary>
            This is the code-behind class for all Quiz rendering pages (Default.aspx),
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.DefaultQuiz.CreateContext">
            <summary>
            Create context when the lesson starts
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.DefaultQuiz.RenderPageContent">
            <summary>
            Render the page content
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.DefaultQuiz.HandlePageEvents(System.String,System.String)">
            <summary>
            Handle page events when the page is posted back
            </summary>
            <param name="eventName"></param>
            <param name="eventArgument"></param>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.DefaultQuiz.Quiz_Load">
            <summary>
            Quiz load event
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.DefaultQuiz.Question_CaptureAnswer">
            <summary>
            Capture the answer when a answer is selected in a question page.
            This event will fire when a question page is posted back.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.DefaultQuiz.Page_Load">
            <summary>
            Page Load event
            </summary>
            <remarks>
            This event fires when a user goes to a page. It is used to track a user’s progress through a lesson and determine when they have completed their training requirement.
            The event will call the Toolbook.RecordPageVisited method.
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.DefaultQuiz.Quiz_End">
            <summary>
            Quiz End event
            </summary>
            <remarks>
            This event fires when a student clicks the “Submit answers” button on the last page. The event will 
            	.Score: Calculate the score (Question number with correct answer/Total question number * 100)
            	.Duration: Calculate the duration of the testing.
            	.QuizQuestionAudit: Record quiz question audit.
            	.QuizAnswerAudit: Record quiz answer audit
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.InfoPath.DefaultQuiz.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.Data.SecurityHandler">
            <summary>
            Summary description for CryptWin.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.SecurityHandler.m_xmlKey">
            <summary>
            This is the key used to encrypt strings 
            If this key is changed then the matching change must be made to the
            Crypt Win application
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.SecurityHandler.m_RSA">
            <summary>
            Member variable of the rsa encryption engine
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.SecurityHandler.#ctor">
            <summary>
            Default constructor
            Instantiates itself with the internal key
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.SecurityHandler.GenerateRandom">
            <summary>
            Builds a new random key
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.SecurityHandler.Encrypt(System.String)">
            <summary>
            Encrypts a string
            </summary>
            <param name="inputString">input string</param>
            <returns>encrypted string</returns>
        </member>
        <member name="M:Bdw.Application.Salt.Data.SecurityHandler.Decrypt(System.String)">
            <summary>
            Decrypts a string
            </summary>
            <param name="inputString">input string</param>
            <returns>decrypted string</returns>
        </member>
        <member name="M:Bdw.Application.Salt.Data.SecurityHandler.ToString">
            <summary>
            Returns the object as an xml string.
            </summary>
            <returns>xml string of the object.</returns>
        </member>
        <member name="P:Bdw.Application.Salt.Data.SecurityHandler.XmlPublicKey">
            <summary>
            Gets the public key in xml format
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.Data.SecurityHandler.xmlPrivateKey">
            <summary>
            Gets the private key in xml format
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.App_Code.Business.LangValueBUS">
            <summary>
            Summary description for LangValueBUS.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.App_Code.Business.LangValueBUS.Save(Bdw.Application.Salt.App_Code.Entity.LangValue)">
            <summary> Save the LangValue, if the object is active, make it inactive and set ID to zero, a new record will be created.</summary>
        </member>
        <member name="T:Bdw.Application.Salt.InfoPath.XHelper">
            <summary>
            Summary description for XHelper.
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.BusinessServices.User">
            <summary>
            Retrieves and updates user information.
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: All Developers
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.GetUser(System.Int32)">
            <summary>
            Gets a single User's Details.
            </summary>
            <returns>Returns a DataTable with the details of one User in the SALT database.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Gavin Buddis
            Date: 10/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.GetUserDetailsByEmail(System.String,System.Int32)">
            <summary>
            Gets users details by email address
            </summary>
            <param name="emailAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.GetSALTAdministrators(System.Int32,System.Int32)">
            <summary>
            Gets a list of SALT Administrators.
            </summary>
            <returns>Returns a DataTable with all the SALT Administrators.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Gavin Buddis
            Date: 23/03/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.GetEmails(System.String)">
            <summary>
            Gets the email addresses of all users in the supplied csv list.
            </summary>
            <returns>Returns a DataTable with the userids and emails of all of the users supplied</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale
            Date: 27/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.GetUnassigned(System.Int32)">
            <summary>
            Gets all active users who have yet to be assigned to a unit
            </summary>
            <returns>Returns a DataSet with the details of all Users who are unassigned.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale
            Date: 23/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.GetUserList(System.Int32)">
            <summary> Get list of users which have a status against the specified module </summary>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.GetUserList(System.Int32,System.Int32)">
            <summary> Get list of users which have a status against the specified module </summary>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.Search(System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            Gets a list of users from a specific Unit which conform to the criteria and 
            who are not Salt or org administrator
            </summary>
            <param name="organisationID">Organisation to search</param>
            <param name="parentUnitIDs">Parent units to search</param>
            <param name="firstName">The text that user's  first name contains</param>
            <param name="lastName">The text that user's  last name contains</param>
            <param name="adminUserID">UserID of the current admin user</param>
            <returns>A list of user</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            Aaron		27/03/2007		@parentUnitIDs type modified from Varchar(500)
            VDL			26 Sep 2008		call the prc_UserSearch in one place only!
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.Search(System.Int32,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Gets a list of users from a specific Unit which conform to the criteria and 
            who are not Salt or org administrator
            </summary>
            <param name="organisationID">ID of the Organisation to search</param>
            <param name="parentUnitIDs">ID of the units</param>
            <param name="firstName">The text that user's  first name contains</param>
            <param name="lastName">The text that user's  last name contains</param>
            <param name="adminUserID"></param>
            <param name="includeInactiveUsers"></param>
            <returns>A list of user</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            Aaron		27/03/2007		@parentUnitIDs type modified from Varchar(500)
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.Search(System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a list of users from a specific Unit which conform to the criteria 
            and who have a user type which is lower than or equal to the specified user type id
            </summary>
            <param name="unitID">ID of the unit</param>
            <param name="firstName">The text that user's  first name contains</param>
            <param name="lastName">The text that user's  last name contains</param>
            <param name="userTypeID">the highest user role that the users belong to</param>
            <param name="adminUserID">The admin user that makes the query</param>
            <returns>A list of users</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            VDL			26 Sep 2008			Call prcUnit_SearchUsers in one place
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.Search(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets a list of users from a specific Unit which conform to the criteria 
            and who have a user type which is lower than or equal to the specified user type id.
            It can be specified whether inactive users should be returned or not.
            </summary>
            <param name="unitID">ID of the unit</param>
            <param name="firstName">The text that user's  first name contains</param>
            <param name="lastName">The text that user's  last name contains</param>
            <param name="userTypeID">the highest user role that the users belong to</param>
            <param name="adminUserID">The admin user that makes the query</param>
            <param name="includeInactiveUsers">Whether inactive users should be returned or not</param>
            <returns>A list of users</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.Search(System.Int32,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Gets a list of users from a specific Unit which conform to the criteria and 
            who are not Salt or org administrator
            </summary>
            <param name="organisationID">Organisation to search</param>
            <param name="parentUnitIDs">Parent units to search</param>
            <param name="firstName">The text that user's  first name contains</param>
            <param name="lastName">The text that user's  last name contains</param>
            <param name="userName">The text that user's  username contains</param>
            <param name="adminUserID">UserID of the current admin user</param>
            <returns>A list of user</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Li Zhang, 4/04/2006
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.Search(System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Gets a list of users from a specific Unit which conform to the criteria and 
            who are not Salt or org administrator
            </summary>
            <param name="organisationID">ID of the Organisation to search</param>
            <param name="parentUnitIDs">ID of the units</param>
            <param name="firstName">The text that user's  first name contains</param>
            <param name="lastName">The text that user's  last name contains</param>
            <param name="userName">The text that user's  username contains</param>
            <param name="adminUserID"></param>
            <param name="includeInactiveUsers"></param>
            <returns>A list of user</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Li Zhang, 4/04/2006
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.GetUnitsTree(System.Int32,System.Int32)">
            <summary>
            Gets the unit tree for a specific user
            The unit that the user belongs to will be preselected, and expanded.
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu
            Date: 17/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.GetAdminUnitsTree(System.Int32)">
            <summary>
            This is a hierarchical list of the Units that this user has Unit Administrator rights to.  
            It is for display-only.
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu
            Date: 17/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.SelectAdminUnitsTree(System.Int32)">
            <summary>
            This is a hierarchical list of the Units that this user has Unit Administrator rights to.  
            Any unit returned can be selected
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale
            Date: 18/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.GetClassification(System.Int32)">
            <summary>
            Returns a single row for the classification assigned to a user
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: John Crawford
            Date: 17/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.Login(System.String,System.String)">
            <summary>
            Gets the user details for authentication and login.
            </summary>
            <param name="userName">username to </param>
            <returns>Returns a collection user details</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu
            Date: 17/02/2004
            Changes.
            Revision Number: 1
            Author:
            Date:
            Description:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.LogLogin(System.Int32)">
            <summary>
            Log the fact that a user has successfully logged in.
            </summary>
            <param name="userName">username of the user that logged in.</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.HomePageDetails(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the users module access details for the homepage.
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Stephen K-Clark
            Date: 01/03/2004
            Changes.
            </remarks>
            <param name="userID">ID of the user</param>
            <param name="courseID">ID of the course</param>
            <returns>DataTable specifically for the home page module list</returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.GetUserCourseStatus(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a user's course status.
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Stephen K-Clark
            Date: 01/03/2004
            Changes.
            </remarks>
            <param name="userID">ID of the user</param>
            <param name="courseID">ID of the course</param>
            <returns>DataTable specifically for the home page course status</returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.LoadUserXML(System.Int32,System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString,System.Int32,System.Int32)">
            <summary>
            Insert or Updates user details as specified in the XML document.
            </summary>
            <param name="ID">The ID of either the Unit or Organisation.</param>
            <param name="userXml">The XML file with the user details.</param>
            <param name="hierachy">Name of the stored procedure to execute.</param>
            <param name="userID">The user id of the user to update</param>
            <returns>Returns a DataTable with the results of the upload.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Vranich
            Date: 17/02/2004
            Changes.
            Revision Number: 1
            Author:
            Date:
            Description:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.GetQuizSummary(System.String)">
            <summary>
            This returns a users quiz summary for a given quiz session
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Stephen K-Clark
            Date: 01/03/2004
            </remarks>
            <param name="quizSessionID">The SessionID of the session that needs to be returned</param>
            <returns>Returns a DataSet with the summary of a users quiz session</returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.GetQuizHistory(System.Int32,System.Int32,System.Int32)">
            <summary>
            This returns a users quiz history for a given quiz module
            </summary>
            <param name="userID">The userid of the user for whom the quiz history is to be returned</param>
            <param name="moduleID">The module for which the quiz history is to be returned.</param>
            <returns>Returns a DataTable with the summary of a users quiz session</returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.GetModuleAccess(System.Int32,System.Int32)">
            <summary>
            Gets user module access settings
            </summary>
            <param name="userID">User ID to get access details for</param>
            <param name="courseID">Course ID to get access detail for</param>
            <returns></returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.SaveModuleAccess(System.Int32,System.Int32,System.String)">
            <summary>
            Saves User module access settings
            </summary>
            <param name="userID">User ID to save access for</param>
            <param name="courseID">Course ID to save access for</param>
            <param name="grantedModuleIDs">Comma seperated list of modules to apply access to</param>
            <returns></returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.Create(System.Int32,System.Int32,System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlBoolean,System.Int32,System.Int32,System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString,System.String,System.String)">
            <summary>
            Creates a new user in the database
            </summary>
            <param name="organisationID">The organisation id of the new user.</param>
            <param name="unitID">The unit id of the new user.</param>
            <param name="firstName">First name of the user.</param>
            <param name="lastName">Last name of the user.</param>
            <param name="userName">Username of the user.</param>
            <param name="email">Email address of the user</param>
            <param name="active">Boolean value indicating that the user is active.</param>
            <param name="password">Password of the user</param>
            <param name="userTypeID">The type of the user</param>
            <param name="actionUserID">The user id of the user performing this user.</param>
            <param name="externalID">The external id of the user</param>
            <returns>Integer success or failure value.</returns>
            <remarks>
            Assumptions: None
            Notes: If the unitID supplied is 0, a null value for the user's unit is made
            Author: Peter Vranich/Gavin Buddis
            Date: 20/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.UpdateUser(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Update a users details into the database - No Password change
            </summary>
            <param name="userID">User Id of the user being updated</param>
            <param name="unitID">Unit Id of the user being updated - may be 0 for
            salt administrators
            </param>
            <param name="firstName">First Name of the user being updated</param>
            <param name="lastName">Last Name of the user being update</param>
            <param name="userName">username of the user being update</param>
            <param name="email">Email Adress of the user being update</param>
            <param name="active">Active Status of the user being update</param>
            <param name="userTypeID">UserType IF of the user being update</param>
            <param name="updatedByUserID">User Id of the user doing the update</param>
            <param name="dateUpdated">date stamp for the previous dateUpdated,
            used as integrity check, if this value does not match the value currently
            in the database then an update has occured since this user loaded the 
            browser page and will cause an integrity constraint failure
            </param>
            <param name="externalID">Users external ID in the organisations other data stores</param>
            <remarks>
            Assumptions: All relevant user/password validation has already occurred
            in the validation on the web page
            Notes: 
            Author: John Crawford
            Date: 18/02/2004
            Changes.
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.Update(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Update a users details into the database - Administrator Password Change
            </summary>
            <param name="userID">User Id of the user being updated</param>
            <param name="unitID">Unit Id of the user being updated - may be 0 for
            salt administrators
            </param>
            <param name="firstName">First Name of the user being updated</param>
            <param name="lastName">Last Name of the user being update</param>
            <param name="userName">username of the user being update</param>
            <param name="email">Email Adress of the user being update</param>
            <param name="active">Active Status of the user being update</param>
            <param name="userTypeID">UserType IF of the user being update</param>
            <param name="updatedByUserID">User Id of the user doing the update</param>
            <param name="dateUpdated">date stamp for the previous dateUpdated,
            used as integrity check, if this value does not match the value currently
            in the database then an update has occured since this user loaded the 
            browser page and will cause an integrity constraint failure
            </param>
            <param name="Password">New Password for this user. 
            Administrator password change so only the new password is required
            </param>
            <param name="externalID">Users external ID in the organisations other data stores</param>
            <remarks>
            Assumptions: All relevant user/password validation has already occurred
            in the validation on the web page
            Notes: 
            Author: John Crawford
            Date: 18/02/2004
            Changes.
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.Update(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Update a users details into the database - Salt User Password Change
            </summary>
            <param name="userID">User Id of the user being updated</param>
            <param name="unitID">Unit Id of the user being updated - may be 0 for
            salt administrators
            </param>
            <param name="firstName">First Name of the user being updated</param>
            <param name="lastName">Last Name of the user being update</param>
            <param name="userName">username of the user being update</param>
            <param name="email">Email Adress of the user being update</param>
            <param name="active">Active Status of the user being update</param>
            <param name="userTypeID">UserType IF of the user being update</param>
            <param name="updatedByUserID">User Id of the user doing the update</param>
            <param name="dateUpdated">date stamp for the previous dateUpdated,
            used as integrity check, if this value does not match the value currently
            in the database then an update has occured since this user loaded the 
            browser page and will cause an integrity constraint failure
            </param>
            
            <param name="Password">New Password for this user. 
            Administrator password change so only the new password is required
            </param>
            <param name="OldPassword">Old password that should be in the database. 
            Returns an error if the old password passed in does not match the password
            previously stored in the database.
            </param>
            <param name="externalID">Users external ID in the organisations other data stores</param>
            <remarks>
            Assumptions: All relevant user/password validation has already occurred
            in the validation on the web page
            Notes: 
            Author: John Crawford
            Date: 18/02/2004
            Changes.
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.Update(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Update a users unit into the database
            </summary>
            <param name="userID">The User to Update</param>
            <param name="unitID">The Users new Unit ID</param>
            <param name="updatedByUserID">The User ID of the user performing the action</param>
            <param name="organisationID">The Organisation ID of the new user</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.ClassificationUpdate(System.Int32,System.String)">
            <summary>
            Updates the classifications for a user id.
            </summary>
            <param name="userID"></param>
            <param name="values">Comma separated list of clasification IDs</param>
            <remarks>Note:
            Procedure will insert a row for each item in the comma seperated list
            Does not check for duplicates so could raise integrity constaint failure
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.GetUserType(System.Int32)">
            <summary>
            Get user type
            </summary>
            <param name="userID"></param>
            <returns></returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.User.GetPermission(System.Int32,System.Int32)">
            <summary>
            Get the admin user permission to a specific user
            </summary>
            <param name="userID">ID of the user details that is accessed</param>
            <param name="adminUserID">The user who is granted permission</param>
            <returns>Permission:
            	'F': Full permission
            	'' : No permission
            </returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 09/03/2004
            Changes:
            </remarks>
        </member>
        <member name="T:Bdw.Application.Salt.BusinessServices.Profile">
            <summary>
            Summary description for Profile.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.App_Code.API.LangValueAPI.Commit(System.Int32,System.Int32)">
            <summary> Commit language values to active </summary>
        </member>
        <member name="M:Bdw.Application.Salt.App_Code.API.LangValueAPI.Resourcelist(System.Int32,System.Int32)">
            <summary> Get list of template resource / committed language value pairs </summary>
        </member>
        <member name="T:Bdw.Application.Salt.Utilities.XMLValidator">
            <summary>
            The XMLValidator class validates an XML file against a specified XSD file.
            The validation returns the ValidXML struct with the indicating success or failure.
            </summary>
            <remarks>
            Assumptions: XSD file is a valid XSD file.
            Notes:
            Author: Peter Vranich, 28/01/0/2004
            Changes:
            </remarks>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.XMLValidator.m_strXMLFile">
            <summary>
            Stores the path and filename of the XML file to be validated.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.XMLValidator.m_strXSDFile">
            <summary>
            Stores the path and filename of the XSD file that the XML file will be validated against.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.XMLValidator.m_strNameSpace">
            <summary>
            Stores the namespace used in the XML file.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.XMLValidator.m_objValidationResult">
            <summary>
            This stores the XML validation result.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.XMLValidator.#ctor(System.String,System.String,System.String)">
            <summary>
            Mandatory fields constructor.
            </summary>
            <param name="XMLFile"> Path and filename of the XML file to be validated.</param>
            <param name="XSDFile"> Path and filename of the XSD file that the XML file will be validated against.</param>
            <param name="NameSpace"> Namespace of the XML document collection.</param>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.XMLValidator.Validate">
            <summary>
            Validates the XML file against a specified Schema file.
            </summary>
            <returns>A ValidXML struct.<see cref="T:Bdw.Application.Salt.Utilities.ValidXML"/></returns>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.XMLValidator.ValidationEventHandler(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            EventHandler for the XML validation  process.
            </summary>
            <param name="sender">Object</param>
            <param name="args">Validation Event Arguments.</param>
        </member>
        <member name="T:Bdw.Application.Salt.Utilities.ValidXML">
            <summary>
            Public struct holding the values indicating whether a XML Validation succeeded or not.  If the validation failed the Errors will
            be found in this struct for that validation attempt.
            </summary>
            <remarks>
            Assumptions:
            Notes: This is a value type not a reference type.
            Author: Peter Vranich, 28/01/0/2004
            Changes:
            </remarks>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.ValidXML.m_blnIsValid">
            <summary>
            Boolean value indicating if the XML file is valid or not.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.ValidXML.m_strError">
            <summary>
            String of any errors that are generated when validating the XML document.
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.Utilities.ValidXML.IsValid">
            <summary>
            Gets or Sets the m_blnIsValid member.
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.Utilities.ValidXML.Error">
            <summary>
            Gets or Sets the m_strError member.
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.Data.DatabaseTool">
            <summary>
            This class provides static methods to manipulate Sql Data Type.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.DatabaseTool.ToLongDateTimeString(System.DateTime)">
            <summary>
            Static function returning a string from a datetime
            </summary>
            <param name="dateTime">DateTime object to convert</param>
            <returns>String representation of the datetime</returns>
        </member>
        <member name="M:Bdw.Application.Salt.Data.DatabaseTool.SqlToString(System.Object)">
            <summary>
            Convert the value of SqlType to string. If the value is Null, return empty string
            </summary>
            <param name="o">Object that is to be converted to a string</param>
            <returns></returns>
        </member>
        <member name="M:Bdw.Application.Salt.Data.DatabaseTool.SqlToString(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Convert the value of SqlBoolean to string
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Bdw.Application.Salt.Data.DatabaseTool.SqlToString(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Convert the value of SqlDateTime to string
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Bdw.Application.Salt.Data.DatabaseTool.SqlToString(System.Data.SqlTypes.SqlDateTime,System.String)">
            <summary>
            Convert the value of SqlDateTime to string.
            Format: d :08/17/2000,g :08/17/2000 16:32, t :16:32, D:Thursday, August 17, 2000,f :Thursday, August 17, 2000 16:32,
            </summary>
            <param name="o">Datetime to convert.</param>
            <param name="format">Format to convert the datetime to.</param>
            <returns></returns>
        </member>
        <member name="M:Bdw.Application.Salt.Data.DatabaseTool.SqlStringSplit(System.Data.SqlTypes.SqlString,System.Char)">
            <summary>
            Split SqlString to SqlString array
            ex: "12,123,234,234" to "12","123", "234", "234"
            </summary>
            <param name="s"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Bdw.Application.Salt.Data.DatabaseTool.SqlStringMerge(System.Data.SqlTypes.SqlString[],System.Char)">
            <summary>
            Merge SqlString  array to SqlString
            ex: "12","123", "234", "234" to "12,123,234,234"
            </summary>
            <param name="s"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="T:Bdw.Application.Salt.BusinessServices.OrganisationConfig">
            <summary>
            This class retrieves Organisation Configuration settings.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.OrganisationConfig.GetList(System.Int32)">
            <summary>
            Gets a list of Organisation configuration
            </summary>
            <param name="organisationID">Organisation to return configuration values for</param>
            <returns></returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale, 28/06/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.OrganisationConfig.GetOne(System.Int32,System.String)">
            <summary>
            Get a single Organisation configuration value
            </summary>
            <returns></returns>
            <param name="organisationID">Organisation to return configuration values for</param>
            <param name="name">Name of the configuration value</param>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale, 28/06/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.OrganisationConfig.Update(System.Int32,System.String,System.String,System.String)">
            <summary>
            Update an organisations configuration value
            </summary>
            <param name="organisationID">organisations id</param>
            <param name="name">name of the key</param>
            <param name="value">value of the key</param>
            <param name="description">Description of key</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.OrganisationConfig.Delete(System.Int32,System.String)">
            <summary>
            Delete an organisation configuration value
            </summary>
            <param name="organisationID">organisation id</param>
            <param name="name">name of key to remove</param>
        </member>
        <member name="T:Bdw.Application.Salt.BusinessServices.Module">
            <summary>
            Retrieves and updates course information.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Module.GetModuleListByCourse(System.Int32,System.Int32)">
            <summary>
            Gets a list of Modules and their details for a given Course
            </summary>
            <returns>Returns a DataTable with Module details</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Gavin Buddis, 11/02/04
            Changes: 
            </remarks>
            <param name="courseID">Parent Course ID of the module to get.</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Module.GetModule(System.Int32,System.Int32)">
            <summary>
            Gets a single Module's details.
            </summary>
            <returns>Returns a DataTable with the details of the specified Module.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Gavin Buddis, 11/02/04
            Changes:
            </remarks>
            <param name="moduleID">Module ID to get the details of.</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Module.Create(System.Int32,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Create a new module.
            </summary>
            <returns>Module ID for the created module.</returns>
            <param name="courseID">Parent Course ID</param>
            <param name="name">name of the module</param>
            <param name="description">Description of the module</param>
            <param name="active">Active flag for the new module</param>
            <param name="createdByUserID">Currently logged on user creating the module</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Module.Update(System.Int32,System.String,System.String,System.Boolean,System.Int32,System.String,System.String,System.String)">
            <summary>
            Updates a module details. If the status is changed, there will be validation checking.
            </summary>
            <param name="moduleID">Module ID whose details are being updated</param>
            <param name="name">Name for the updated module</param>
            <param name="description">Description for the updated module</param>
            <param name="active">Active flag for the updated module</param>
            <param name="updatedByUserID">Currently logged on user updating the module</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Module.UpdateSequence(System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates a module's sequence value only.
            </summary>
            <param name="moduleID">Module ID whose sequence value is being updated</param>
            <param name="sequence">New sequence value for the module</param>
            <param name="updatedByUserID">Currently logged on user updating the module</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Module.GetLesson(System.Int32,System.Int32)">
            <summary>
            Retrieves the active lessons for a specified module
            </summary>
            <param name="moduleID">Module ID of the desired lessons</param>
            <returns>The properties for the active lessons</returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Module.GetQuiz(System.Int32,System.Int32)">
            <summary>
            Retrieves the active quizzes for a specified module
            </summary>
            <param name="moduleID">Module ID of the desired quizs</param>
            <returns>The properties for the active quizzes</returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Module.ResetQuizStatus(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary> Allows the manual reset of user quiz status independant of whether new quiz content has been uploaded or not </summary>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Module.ResetLessonStatus(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary> Allows the manual reset of user lesson status independant of whether new lesson content has been uploaded or not </summary>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Module.GetLatestQuizLessonID(System.Int32,System.String)">
            <summary> get the id for the latest quiz </summary>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Module.InsertQuizStatus(System.Int32,System.Int32,Bdw.Application.Salt.Data.QuizStatus)">
            <summary> Insert a user status into the UserQuizStatus table </summary>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Module.InsertLessonStatus(System.Int32,System.Int32,Bdw.Application.Salt.Data.LessonStatus)">
            <summary> Insert a user status into the UserQuizStatus table </summary>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Module.GetUserList(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary> Get users across all user which have access to a module or all users where their organisation has access to the module</summary>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Module.UserAssignedModule(System.Int32,System.Int32)">
            <summary> does the user have access to the module </summary>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Module.UserHasQuizActivity(System.Int32,System.Int32)">
            <summary> does the user have activity for the module quiz </summary>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Module.UserStartedOtherCourseModules(System.Int32,System.Int32)">
            <summary> Besides the module specified, does the user have anyother modules they have passed or failed. </summary>
            <param name="userID"></param>
            <param name="moduleID"></param>
            <returns></returns>
        </member>
        <member name="T:Bdw.Application.Salt.App_Code.Entity.LangValue">
            <summary>
            Summary description for LangValue.
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.BusinessServices.Toolbook">
            <summary>
            Retrieves and updates toolbook information.
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: All Developers
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.#ctor">
            <summary>
            This object represents the toolbooks and their associated functionality.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.UploadContentObjectXML(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlString)">
            <summary>
            This method loads the new XML content into the relevant tables.
            </summary>
            <param name="contentXml">A string containg the new xml content</param>
            <param name="userID">The userID of the user uploading this new content.</param>
            <param name="moduleID">The module for which this content is to be used.</param>
            <param name="courseID">The course for which this content is to be used.</param>
            <param name="toolLocation">The Location (path) for this toolbook</param>
            <returns>
            A Dataset containing information regarding the success of the upload. For
            further information please see the stored procedure.
            </returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.UploadContentObjectXMLPreview(System.String,System.Int32,System.Int32)">
            <summary>
            This method previews the new XML content without loading it into the database.
            It validates that the xml content is valid in compared to the existing salt database content.
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale 3/02/2004
            Changes:
            </remarks>
            <param name="contentXml">A string containg the new xml content</param>
            <param name="moduleID">The module for which this content is to be used.</param>
            <returns>
            DataSet containing the results of the attempted validation. See
            See the stored procedure for more information
            </returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.CreateQuizQuestionAudit(System.String,System.String)">
            <summary>
            This method creates a new quiz audit entry that indicates a person has attempted a quiz.
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale 3/02/2004
            Changes:
            </remarks>
            <param name="sessionID">The session id of the Quiz Session</param>
            <param name="toolbookPageID">The toolbook Page ID of the quiz attempted by the person</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.CreateQuizAnswerAudit(System.String,System.String,System.Int32)">
            <summary>
            This method creates a new QuizAnswer audit entry that indicates a person has answered a question.
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale 3/02/2004
            Changes:
            </remarks>
            <param name="sessionID">The session id of the Quiz Session</param>
            <param name="toolbookPageID">The toolbook Page ID of the question attempted by the person</param>
            <param name="quizAnswerID">The answer selected by the person</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.EndQuizSession(System.String,System.Int32,System.Int32)">
            <summary>
            This method creates a new QuizAnswer audit entry that indicates a person has answered a question.
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale 3/02/2004
            Changes:
            </remarks>
            <param name="quizSessionID">The session id of the Quiz Session, unique GUID that identifies this toolbook quiz session</param>
            <param name="duration">The duration in seconds of the quiz as messured by toolbook</param>
            <param name="score">The score as mesured by toolbook</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.GetModuleIDBySessionID(System.String)">
            <summary>
            This method returns the ModuleID of the module that the session is linked to.
            </summary>
            <remarks>
            Assumptions:None
            Notes:
            Author: Peter Kneale, 05/02/2004
            Changes:
            </remarks>
            <param name="sessionID">ID of the session.</param>
            <returns>ID of the associated module.</returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.BeforeQuizStart(System.Int32,System.Int32)">
            <summary>
            BeforeQuizStart - Prepears to start a unique quiz - returns a GUID
            </summary>
            <returns>DataTable containing values necessary to launch toolbook.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale, 03/02/2004
            Changes:
            </remarks>
            <param name="userID">The User attempting the Quiz.</param>
            <param name="moduleID">The module the User is attempting.</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.StartQuiz(System.String)">
            <summary>
            Starts a quiz session for a particular user attempting a particular quiz.
            </summary>
            <returns> A boolean value indicating whether the session started successfully or not.
            </returns>
            <remarks>
            Assumptions:None
            Notes:
            Author: Peter Kneale, 05/02/2004
            Changes:
            </remarks>
            <param name="QuizSessionID">User ID of the user starting the quiz.</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.GetQuizIDBySessionID(System.String)">
            <summary>
            This method returns a Quiz ID from a ToolBook ID
            </summary>
            <remarks>
            Assumptions:None
            Notes:
            Author: Peter Kneale, 05/02/2004
            Changes:
            </remarks>
            <param name="sessionID">The session ID from which to get the Quiz ID</param>
            <returns>QuizID</returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.GetUserIDBySessionID(System.String)">
            <summary>
            This method returns a users User ID based on a current Sesion Id.
            </summary>
            <remarks>
            Assumptions:None
            Notes:
            Author: Peter Kneale, 05/02/2004
            Changes:
            </remarks>
            <param name="SessionID">The session ID from which to get the User ID</param>
            <returns>UserID of the user matching the sessionid </returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.GetUnitIDByUserID(System.Int32)">
            <summary>
            This method returns a users Unit ID based on their UserID
            </summary>
            <remarks>
            Assumptions:None
            Notes:
            Author: Peter Kneale, 05/02/2004
            Changes:
            </remarks>
            <param name="UserID">UserID of desired user.</param>
            <returns>UnitID of the Unit that the user belongs to.</returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.GetQuizPassMark(System.Int32,System.Int32)">
            <summary>
            Gets the pass mark of the quiz that belongs to the specified Unit and Module.
            </summary>
            <remarks>
            Assumptions:None
            Notes:
            Author: Peter Kneale, 05/02/2004
            Changes:
            </remarks>
            <param name="UnitID">UnitID that the quiz belongs to.</param>
            <param name="ModuleID">ModuleID that the quiz belongs to.</param>
            <returns></returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.GetQuizQuestionsCountByQuizID(System.Int32)">
            <summary>
            This method returns the number of questions in a particular quiz.
            </summary>
            <remarks>
            Assumptions:None
            Notes:
            Author: Peter Kneale, 05/02/2004
            Changes:
            </remarks>
            <param name="QuizID">QuizID of the Quiz that we wish to could the questions in.</param>
            <returns>The number of questions.</returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.ValidateAccess(System.Int32,System.Int32)">
            <summary>
            ValidateAccess
            </summary>
            <returns>Returns true if a user can access a module.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Stephen Kennedy-Clark, 03/02/0/2004
            Changes:
            </remarks>
            <param name="userID">integer containg the user id</param>
            <param name="moduleID">integer containg the module id</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.BeforeLessonStart(System.Int32,System.Int32)">
            <summary>
            BeforeLessonStart - Prepears to start a unique lesson - returns a GUID
            </summary>
            <returns>DataTable containg the GUID for the session</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Stephen Kennedy-Clark, 03/02/0/2004
            Changes:
            </remarks>
            <param name="userID">integer containg the user id</param>
            <param name="moduleID">integer containg the module id</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.StartLesson(System.Data.SqlTypes.SqlString)">
            <summary>
            StartLesson - updates a prepared lesson, starts it if it has not already been started and return true, else return false
            </summary>
            <returns>Returns true if a session has not been strated before</returns>
            <remarks>
            Assumptions: None
            Notes:
             this function is to ensure that the lesson onload event only fires once
             for each toolbook - and that no attempt is made (ie hitting the 
             back / forward button) to restart a lesson
            Author: Stephen Kennedy-Clark, 03/02/0/2004
            Changes:
            </remarks>
            <param name="sessionID">String containg the session GUID</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.SessionIsUnique(System.Data.SqlTypes.SqlString)">
            <summary>
            SessionIsUnique
            </summary>
            <returns>Returns true if a session has not been used before</returns>
            <remarks>
            Assumptions: None
            Notes:
             this function is to ensure that the lesson onload event only fires once
             for each toolbook - and that no attempt is made (ie hitting the 
             back / forward button) to restart a lesson
            Author: Stephen Kennedy-Clark, 03/02/0/2004
            Changes:
            </remarks>
            <param name="sessionID">String containg the session GUID</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.GetPagesVisited(System.Data.SqlTypes.SqlString)">
            <summary>
            GetPagesVisited
            </summary>
            <returns>Returns a data table of pages that the user has visited in this toolbook</returns>
            <remarks>
            Assumptions: None
            Notes:
             this function is to ensure that the lesson onload event only fires once
             for each toolbook - and that no attempt is made (ie hitting the 
             back / forward button) to restart a lesson
            Author: Stephen Kennedy-Clark, 03/02/0/2004
            Changes:
            </remarks>
            <param name="sessionID">String containg the session GUID</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.RecordPageVisited(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
            <summary>
            RecordPageVisited
            </summary>
            <returns>Returns boolean true if the lesson was not already finished and the page visited exists in the toolbook</returns>
            <remarks>
            Assumptions: None
            Notes:
             This function records the fact that a student has visited a page in a toolbook
             it requires the toolbook pageid and the session id
             The underlying stored proc will not accept the page if the lesson has already been finished
             or if salt cannot match the pageID to a page in the lesson
            Author: Stephen Kennedy-Clark, 03/02/0/2004
            Changes:
            </remarks>
            <param name="sessionID">String containg the session GUID</param>
            <param name="pageID">Integer containg the page id</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.GetBookmark(System.Data.SqlTypes.SqlString)">
            <summary>
            GetBookmark
            </summary>
            <returns>Returns the ToolBookPageID for the page in the current toolbook that a user has set</returns>
            <remarks>
            Assumptions: None
            Notes:
            Author: Stephen Kennedy-Clark, 03/02/0/2004
            Changes:
            </remarks>
            <param name="sessionID">String containg the session GUID</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.EndLessonSession(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlString)">
            <summary>
            EndLessonSession
            </summary>
            <remarks>
            Assumptions: None
            Notes:
            Author: Stephen Kennedy-Clark, 03/02/0/2004
            Changes:
            </remarks>
            <param name="sessionID">String containg the session GUID</param>
            <param name="duration">Integer - The number of seconds that the lesson was running</param>
            <param name="bookmark">string containg teh toolbook page id to be bookmarked</param>
            <returns>Return true if the lesson was ended sucessfully</returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.GetUser(System.Data.SqlTypes.SqlString)">
            <summary>
            GetUser
            </summary>
            <returns>
            Returns the user's first and last names concatenated with a space
            </returns>
            <remarks>
            Assumptions: None
            Notes:
            Author: Stephen Kennedy-Clark, 03/02/0/2004
            Changes:
            </remarks>
            <param name="sessionID">String containg the session GUID</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.GetQuizScore(System.Data.SqlTypes.SqlString)">
            <summary>
            prcQuiz_GetScore
            </summary>
            <returns>
            Returns the user score based on their session id
            </returns>
            <remarks>
            Assumptions: None
            Notes:
            Author: Peter Kneale, 24 / 2 / 05
            Changes:
            </remarks>
            <param name="sessionID">String containg the session GUID</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.BeforeQuizEnd(System.String,System.Int32,System.Int32)">
            <summary>
            BeforeQuizEnd - Prepears to end a unique quiz 
            </summary>
            <returns>DataTable containing values necessary to end a quiz.</returns>
            <remarks>
            Assumptions: 
            Notes: 
            Author: Li Zhang, 17/10/2005
            Changes:
            </remarks>
            <param name="quizSessionID">The unique quiz session ID.</param>
            <param name="duration">The duration in seconds.</param>
            <param name="score">The score as mesured by toolbook</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Toolbook.EndQuizSession_UpdateTables(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime)">
            <summary>
            This method creates a new QuizAnswer audit entry that indicates a person has answered a question.
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Li Zhang 17/10/2006
            Changes:
            </remarks>
            <param name="quizSessionID">The session id of the Quiz Session, unique GUID that identifies this toolbook quiz session</param>
            <param name="duration">The duration in seconds of the quiz as messured by toolbook</param>
            <param name="score">The score as mesured by toolbook</param>
            <param name="userID">The user who took the quiz</param>
            <param name="quizID">The quiz ID</param>
            <param name="passMark">The quiz pass mark</param>
            <param name="unitID">The user's unit ID</param>
            <param name="moduleID">The module ID</param>
            <param name="courseID">The course ID</param>
            <param name="oldCourseStatus">The old course ID</param>
            <param name="newQuizStatus">The new quiz status ID</param>
            <param name="newCourseStatus">The new course status ID</param>
            <param name="quizFrequency">The quiz frequency </param>
        </member>
        <member name="T:Bdw.Application.Salt.BusinessServices.Organisation">
            <summary>
            Retrieves and updates organisation information.
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Vranich, 28/01/0/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Organisation.GetOrganisationList">
            <summary>
            Gets a list of Organisations.
            </summary>
            <returns>Returns a DataTable with the details of all Organisations in the SALT database.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Vranich, 28/01/0/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Organisation.GetOrganisationList(System.Int32)">
            <summary> Get list of organisations with access to a module </summary>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Organisation.GetOrganisation(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlInt32)">
            <summary>
            Gets a single Organisations Details.
            </summary>
            <returns>Returns a DataTable with the details of one Organisation in the SALT database.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Vranich
            Date: 28/01/0/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Organisation.UpdateDomainName(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlString)">
            <summary>
            Update domain name for a specific organisation
            </summary>
            <param name="organisationID"></param>
            <param name="domainName"></param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Organisation.GetOrganisationNotes(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlInt32)">
            <summary>
            Gets organisation notes.
            </summary>
            <returns>Returns a string containing the organisation notes</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Stephen Kennedy-Clark
            Date: 09/02/2004
            Changes: 
            </remarks>
            <param name="organisationID">ID of the organisation</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Organisation.GetOrganisationAdministrators(System.Data.SqlTypes.SqlInt32)">
             <summary>
             Gets a List of all the Administrators for a particular organisation.
             </summary>
            <param name="organisationID"> ID of the Organisation that you wish to get the Admins for.</param>
             <returns>Returns a DataTable with the details of all the Administrators for a particular organisation.</returns>
             <remarks>
             Assumptions: None
             Notes: 
             Author: Peter Vranich
             Date: 12/02/0/2004
             Changes:
             </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Organisation.GetUsers(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
            <summary>
            Gets a List of all non administrative users for a particular organisation.
            </summary>
            <param name="organisationID"> ID of the Organisation that you wish to get the Users for.</param>
            <param name="firstName"> First name of the user(s) to search for.</param>
            <param name="lastName"> Last name of the user(s) to search for.</param>
            <returns> Returns a DataTable with the details of all the searched Users for a particular organisation.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Vranich
            Date: 16/02/0/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Organisation.RemoveAdministrator(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Removes an Organisation administrator.
            </summary>
            <param name="updateUserID"> ID of the user to update.</param>
            <param name="actionUserID"> ID of the user that is making the change.</param>
            <param name="organisationID"> ID of the Organisation that this update is happening to.</param>
            <param name="originalDateUpdated"> The date of the record as at the time it was retrieved from the database.</param>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Vranich
            Date: 13/02/0/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Organisation.AddAdministrator(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Adds an Organisation administrator.
            </summary>
            <param name="updateUserID"> ID of the user to update.</param>
            <param name="actionUserID"> ID of the user that is making the change.</param>
            <param name="organisationID"> ID of the Organisation that this update is happening to.</param>
            <param name="originalDateUpdated"> The date of the record as at the time it was retrieve from the database.</param>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Vranich
            Date: 16/02/0/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Organisation.UpdateOrganisation(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean,System.String,System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Updates the details of a specific organisation.
            </summary>
            <param name="organisationID"> The ID of the organisation to be updated.</param>
            <param name="name"> The name of the organisation.</param>
            <param name="notes"> The notes for the organisation.</param>
            <param name="logo"> The logo for the organisation.</param>
            <param name="lessonFrequency"> The default lesson frequency for the organisation.</param>
            <param name="quizFrequency"> The default quiz frequency for the organisation.</param>
            <param name="quizPassMark"> The default quiz pass mark for the organisation.</param>
            <param name="actionUserID"> The ID of the user creating the organisation.</param>
            <param name="originalDateUpdated"> The date of the record as at the time it was retrieved from the database.</param>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Vranich
            Date: 18/02/0/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Organisation.AddOrganisation(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean,System.String,System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Adds a new organisation to the database.
            </summary>
            <param name="name"> The name of the organisation.</param>
            <param name="notes"> The notes for the organisation.</param>
            <param name="logo"> The logo for the organisation.</param>
            <param name="lessonFrequency"> The default lesson frequency for the organisation.</param>
            <param name="quizFrequency"> The default quiz frequency for the organisation.</param>
            <param name="quizPassMark"> The default quiz pass mark for the organisation.</param>
            <param name="actionUserID"> The ID of the user creating the organisation.</param>
            <returns> The ID of the newly created organisation.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Vranich
            Date: 18/02/0/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Organisation.GetCourseAccessList(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Gets a list of all Courses and flags which one the organisation has access to.
            </summary>
            <param name="organisationID"> The ID of the organisation that you wish to get the course access list for.</param>
            <returns> A datatable with all the courses and a flag indicating which one this organisation has access to.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Vranich
            Date: 20/02/0/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Organisation.SaveCourseAccess(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlString)">
            <summary>
            Saves the course access settings for an organisation.
            </summary>
            <param name="organisationID"> The ID of the organisation that you wish to save the changes for.</param>
            <param name="grantedCourseIDs"> A comma seperated list of CourseIDs that the organisation will have access to.</param>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Vranich
            Date: 20/02/0/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Organisation.UpdateDeliquency(System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.DateTime)">
            <summary>
            Method to update delinquency from Organisation Mail setup screen
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Organisation.getdate(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Gets the local time for administrators of an Organisation
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Changes:
            </remarks>
        </member>
        <member name="T:Bdw.Application.Salt.App_Code.Entity.LangInterface">
            <summary>
            Summary description for LangInterface.
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.App_Code.Data.LangDB">
            <summary>
            Summary description for LangDB.
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.Utilities.CSVGenerator">
            <summary>
            This class provides methods to generate a CSV string from a DataTable
            and either write this data to a file or return it via a Stream object.
            </summary>
            <remarks>
            Assumptions: XSD file is a valid XSD file.
            Notes:
            Author: Peter Vranich, 28/01/0/2004
            Changes:
            </remarks>
            <example></example>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.CSVGenerator.cm_strColumnDelimiter">
            <summary>
            Value to seperate each colunm value.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.CSVGenerator.cm_strRowDelimiter">
            <summary>
             Value to seperate each row.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.CSVGenerator.m_strHeaderText">
            <summary>
            Text to appear on first line of the generated CSV string.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.CSVGenerator.am_strColumnNames">
            <summary>
            The generator will use the table column names if this value is not specified
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.CSVGenerator.m_dtbDataSource">
            <summary>
            DataTable populated with rows that are used to populate the CSV string.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.CSVGenerator.#ctor(System.Data.DataTable)">
            <summary>
            Constructor
            </summary>
            <param name="dataSource">DataTable containing desired information to be written to CSV file.</param>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.CSVGenerator.Generate(System.IO.Stream)">
            <summary>
            Generates and saves the CSV document to the specified stream
            </summary>
            <param name="outStream">outStream returns Stream of data from the DataTable in CSV format.</param>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.CSVGenerator.Generate(System.String)">
            <summary>
            Generates and saves the CSV document to the specified file.
            If the file already exists it will be written over.
            If the file doesnt exist then it will be created.
            </summary>
            <param name="fileName"> File name that you wish to save the content to.</param>
            <example>
            This will generate a csv file named 'C:\example.txt' from the stored procedure 'spTest'.
            The column headings will look like this:
            
            ******** Testing Report Generator ******** 
            Column One,DBCOLUMN2,Column Three,Column Four,DBCOLUMN3
            
            Where DBCOLUMN is the name of the column returned by the stored procedure.
            
            <code>
            Bdw.Application.Salt.Data.StoredProcedure spGetResults = new Bdw.Application.Salt.Data.StoredProcedure("spTest");
            System.Data.DataSet ds;
            ds = spGetResults.ExecuteDataSet();
            DataTable dtbData = ds.Tables[0] ;
            String[] astrColHeadings = new String[5];
            astrColHeadings[0]="Column One";
            astrColHeadings[2]="Column Three";
            astrColHeadings[3]="Column Four";
            Salt.Utilities.CSVGenerator csvTest = new Bdw.Application.Salt.Utilities.CSVGenerator(dtbData);
            csvTest.Columns = astrColHeadings;
            csvTest.HeaderText =" ******** Testing Report Generator ******** ";		
            csvTest.Generate ("c:\\example.txt");
            </code> 
            </example>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.CSVGenerator.GenerateContent">
            <summary>
            Generates a string from column values in m_dtbDataSource.
            Columns are delimited by cm_strColumnDelimiter.
            Rows are delimited by cm_strRowDelimiter.
            Columns containing string values are enclosed in double quotes.
            </summary>
            <returns>String: Comma Seperated Values From m_dtbDataSource</returns>
        </member>
        <member name="P:Bdw.Application.Salt.Utilities.CSVGenerator.HeaderText">
            <summary>
            Gets or Sets the header text in output csv file.
            This can be one line or multiple lines of text with \r\n as line delimiter
            </summary>
            <remarks>
            Assumptions: NumberToReturn > 0
            Notes:
            Author: Peter Kneale, 05/02/2004
            Changes:
            </remarks>
        </member>
        <member name="P:Bdw.Application.Salt.Utilities.CSVGenerator.Columns">
            <summary>
            Gets or Sets the customised column names.
            The generator will use the table column names if this value is not specified
            If the number of columns doesnt equal the upper bound of this array then an 
            error will be raised. Empty Strings are acceptable if no column header is required
            for a particular column. Ie:
            if Column[i] Not Initialised : Header = DataColumn[i]
            if Column[i] Initialised     : Header = ..,Column[i],...
            if Column[i] Empty String    : Header = ..,,..
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.Utilities.CSVGenerator.DataSource">
            <summary>
            Gets or Sets data source table for the csv body.
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.BusinessServices.Link">
            <summary>
            This class handles the maintenance of links within the system
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Link.GetLinksByOrganisation(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Method returns a datatable containing links that exist within a single organisation
            </summary>
            <remarks>
            Assumptions:None
            Notes:
            Author: Peter Kneale, 03/03/04
            Changes:
            </remarks>
            <param name="organisationID">The organisation from which the links are to be returned.</param>
            <returns>DataTable containing information relating to the links that exist.</returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Link.Add(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlInt32)">
            <summary>
            Adds a Link to the tblLink table.
            </summary>
            <remarks>
            Assumptions:None
            Notes:
            Author: Peter Kneale,03/03/04
            Changes:
            </remarks>
            <param name="organisationID"> The ID of the  organisation to add the link to.</param>
            <param name="caption"> The caption of the link.</param>
            <param name="url"> The Url of the Link.</param>
            <param name="showDisclaimer"> Flag to indicate whether or not to show the disclaimer.</param>
            <param name="userID"> The ID of the user adding this link.</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Link.Update(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlInt32,System.Int32)">
            <summary>
            This method updates an existing link within the salt database.
            </summary>
            <remarks>
            Assumptions:None
            Notes:
            Author: Peter Kneale, 03/03/04
            Changes:
            </remarks>
            <param name="linkID">The id of the existing link</param>
            <param name="caption">The updated caption.</param>
            <param name="url">The updated URL.</param>
            <param name="showDisclaimer">Whether to show the disclaimed or not.</param>
            <param name="userID">The user ID of the user performing the update.</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Link.Delete(System.Data.SqlTypes.SqlInt32)">
            <summary>
            This method deletes an existing link within the salt database.
            </summary>
            <remarks>
            Assumptions:None
            Notes:
            Author: Peter Kneale, 03/03/04
            Changes:
            </remarks>
            <param name="linkID">The ID of the link to delete</param>
        </member>
        <member name="T:Bdw.Application.Salt.App_Code.Data.LangValueDB">
            <summary>
            Summary description for LangDB.
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.Utilities.ImportUsersPreview">
            <summary>
            Summary description for ImportUsers.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.ImportUsersPreview.m_intID">
            <summary>
            The ID of either the Organisation or the Unit.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.ImportUsersPreview.m_strHierachy">
            <summary>
            The Hierachy where the Imports users call was made from.
            </summary>
            <remarks> Can either be Organisation or Unit.</remarks>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.ImportUsersPreview.m_intUserID">
            <summary>
             ID of user inporting the User xmlData.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.ImportUsersPreview.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.ImportUsersPreview.#ctor(System.String)">
            <summary>
            Use this constructor if you only wish to upload an XML document without validating it first.
            </summary>
            <param name="XMLFile"> Path and filename of the XML file to be loaded.</param>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.ImportUsersPreview.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Mandatory fields constructor.
            Use this constructor if you wish to validate the XML document.
            </summary>
            <param name="XMLFile"> Path and filename of the XML file to be loaded.</param>
            <param name="XSDFile"> Path and filename of the XSD file that the XML file will be validated against.</param>
            <param name="Namespace"> Namespace of the XML document collection.</param>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.ImportUsersPreview.Load">
            <summary>
            This method validates an XML document against a specified XSD.  It then loads data from the XML document
            into the users table via the LoadUserXML method in the User class.
            </summary>
            <returns> DataSet with any errors that may have been generated at the database level.</returns>
            <remarks> This method overrides the base method <see cref="M:Bdw.Application.Salt.Utilities.XMLLoader.Load"/>.</remarks>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.ImportUsersPreview.GetXMLData(System.String)">
            <summary>
            
            </summary>
            <param name="xmlFile"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Bdw.Application.Salt.Utilities.ImportUsersPreview.ID">
            <summary>
            Gets or Sets either the OrganisationID or the UnitID.
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.Utilities.ImportUsersPreview.Hierachy">
            <summary>
            Gets or Sets the Hierachy of where the call was made to Import users.
            </summary>
            <remarks> This can only be Organisation or Unit.</remarks>
        </member>
        <member name="P:Bdw.Application.Salt.Utilities.ImportUsersPreview.UserID">
            <summary>
            Gets or Sets the ID of user importing the User xmlData.
            </summary>
        </member>
        <member name="P:Bdw.Application.Salt.Utilities.ImportUsersPreview.UniqueField">
            <summary>
            Gets or Sets the ID of user inporting the User xmlData.
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.ErrorHandler.ErrorLog">
            <summary>
            This class provides methods to maintain the error log.
            It can write the log to two locations. These locations are
            defined in the Web.Config file. The first is the database
            </summary>
            <remarks>
            Assumptions: The error tables are contained in the same database as SALT
            Notes:
            Author: Peter Kneale, 05/02/2004
            Changes:
            </remarks>
            <example>
            To Raise an Regular Error from an Exception
            <code>
            ErrorHandler.ErrorLog ErrorLog = new ErrorHandler.ErrorLog (ex);
            </code>
            To Raise a Less Severe Error
            ErrorHandler.ErrorLog ErrorLog = new ErrorHandler.ErrorLog (ex, ErrorLevel.InformationOnly);
            
            To Raise a More Severe Error 
            ErrorHandler.ErrorLog ErrorLog = new ErrorHandler.ErrorLog (ex, ErrorLevel.High);
            
            To Raise a More Customised Error
            ErrorHandler.ErrorLog ErrorLog = new ErrorHandler.ErrorLog (ex, ErrorLevel.High,"My Module Name","My Function Name", "My Code");
            
            To Return a Datatable of existing errors from the SALT database.
            ErrorHandler.ErrorLog oErrorLog = new ErrorHandler.ErrorLog ();
            DataTable dtbErrorResults = oErrorLog.GetReport();
            </example>
        </member>
        <member name="F:Bdw.Application.Salt.ErrorHandler.ErrorLog.m_strStackTrace">
            <summary>
            Private string containing the StackTrace Information from the Exception.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.ErrorHandler.ErrorLog.m_sqlSource">
            <summary>
            Private SQL String containing the Error Source Information from the Exception
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.ErrorHandler.ErrorLog.m_sqlMessage">
            <summary>
            Private SQL String containing the Error Message Information from the Exception
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.ErrorHandler.ErrorLog.m_sqlStackTrace">
            <summary>
            Private SQL String containing the Stack Trace Information from the Exception
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.ErrorHandler.ErrorLog.ErrorStatus">
            <summary>
            public enumeration of the Error Status, New Errors are set to unassigned
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.ErrorHandler.ErrorLog.m_ErlErrorLevel">
            <summary>
            Private enumeration of the Error Level, By default they are assigned ErrorLevel.Medium
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.ErrorHandler.ErrorLog.m_strErrorLogDB">
            <summary>
            Indicates if the class is to save the error to the database
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.ErrorHandler.ErrorLog.m_strErrorLogFile">
            <summary>
            Private string that indicates if the class is t save the error to the file
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.ErrorHandler.ErrorLog.m_strErrorLogFileName">
            <summary>
            Private string containing the name of the file to log to.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.ErrorHandler.ErrorLog.m_strErrorLogEventName">
            <summary>
            Private string containing the event category to log the events to.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.ErrorHandler.ErrorLog.m_strEventLogName">
            <summary>
            Private string containing the event log to log the events to.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.ErrorHandler.ErrorLog.m_strModule">
            <summary>
            Private string containing the optional module that the error occurred in.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.ErrorHandler.ErrorLog.m_strFunction">
            <summary>
            Private string containing the optional function that the error occurred in.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.ErrorHandler.ErrorLog.m_strCode">
            <summary>
            Private string containing the optional code that the error occurred in.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.ErrorHandler.ErrorLog.#ctor">
            <summary>
            Constructor to use when we wish to just instantiate the object
            in order to get logs etc.
            <code>
            ErrorHandler.ErrorLog oErrorLog = new ErrorHandler.ErrorLog ();
            DataTable dtbErrorResults = oErrorLog.GetReport();
            </code>
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale 3/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.ErrorHandler.ErrorLog.#ctor(System.Exception)">
            <summary>
            Constructor to use when we wish to log a basic exception
            <code>
            ErrorHandler.ErrorLog oErrorLog = new ErrorHandler.ErrorLog (ex);
            </code>
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale 3/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.ErrorHandler.ErrorLog.#ctor(System.Exception,Bdw.Application.Salt.Data.ErrorLevel)">
            <summary>
            Constructor to use when we wish to log a basic exception with a specific error level.
            <code>
            ErrorHandler.ErrorLog oErrorLog = new ErrorHandler.ErrorLog (ex);
            </code>
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale 3/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.ErrorHandler.ErrorLog.#ctor(System.Exception,Bdw.Application.Salt.Data.ErrorLevel,System.String,System.String,System.String)">
            <summary>
            Constructor to use when we wish to log a basic exception with a specific error level
            and also the name of the Module, Function and Code that failed
            <code>
            ErrorHandler.ErrorLog oErrorLog = new ErrorHandler.ErrorLog (ex,"My Dumb Module","My Useless Function","My bad code");
            </code>
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale 3/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.ErrorHandler.ErrorLog.#ctor(System.Exception,Bdw.Application.Salt.Data.ErrorLevel,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor to use when we wish to log an exception whilst running a stored procedured with a specific error level
            and also the name of the Module, Function and Code that failed
            <code>
            ErrorHandler.ErrorLog oErrorLog = new ErrorHandler.ErrorLog (ex,"My Dumb Module","My Useless Function","My bad code", "stored procedure details");
            </code>
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale 3/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.ErrorHandler.ErrorLog.Save">
            <summary>
            This method will attempt to save the error to the locations specified in the Web.Config file.
            It is called when an error log class is initialised with any constructor except the one with no parameters
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale 3/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.ErrorHandler.ErrorLog.SaveToDB">
            <summary>
            This method will save the current error to the database via a stored procedure.
            If it fails then the error will be written to the event log.
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale 3/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.ErrorHandler.ErrorLog.SaveToFile">
            <summary>
            This method will save the current error to the file..
            If it fails then the error will be written to the event log.
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale 3/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.ErrorHandler.ErrorLog.SaveToEvent">
            <summary>
            This method will save the current error to the event log..
            If it fails then the error will be written to the event log.
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale 3/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.ErrorHandler.ErrorLog.GetCallingAssemblyFolder">
            <summary>
            Finds the Assembly folder of the current assembly.
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale 3/02/2004
            Changes:
            </remarks>
            <returns>String containing the assembly folder.</returns>
        </member>
        <member name="M:Bdw.Application.Salt.ErrorHandler.ErrorLog.GetSetting">
            <summary>
            Gets settings related to where exactly the error log should be updated.
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale 3/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.App_Code.API.LangInterfaceAPI.InterfaceList(System.Int32)">
            <summary> Get list of interfaces </summary>
        </member>
        <member name="M:Bdw.Application.Salt.App_Code.API.LangInterfaceAPI.GetEntity(System.Int32)">
            <summary> Get interface record </summary>
        </member>
        <member name="T:Bdw.Application.Salt.Utilities.CSVtoXMLConverter">
            <summary>
            This class provides methods to generate an xml document from a CSV file
            </summary>
            <remarks>
            Assumptions: CSV file is valid.
            Notes:
            Author: Stephen Clark 6/4/04
            Changes:
            </remarks>
            <example></example>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.CSVtoXMLConverter.charSplit">
            <summary>
            This is the character used to split the string
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.CSVtoXMLConverter.xmlTextWriter">
            <summary>
            This XML Text Writer is used to generate the xml file
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.CSVtoXMLConverter.HasHeader">
            <summary>
            Boolean flag indicating the presence of a header row in the dataset
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.CSVtoXMLConverter.m_fsInput">
            <summary>
            Filestream to read the csv file
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Utilities.CSVtoXMLConverter.m_fsOutput">
            <summary>
            Filestream to write the xml file
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.CSVtoXMLConverter.#ctor(System.IO.FileStream,System.IO.FileStream)">
            <summary>
            Constructor that accepts filestreams
            </summary>
            <param name="fsInput">Filestream connected to the input csv file</param>
            <param name="fsOutput">Filestream connected to the output xml file</param>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.CSVtoXMLConverter.#ctor(System.String,System.String)">
            <summary>
            Constructor that accepts filenames
            </summary>
            <param name="fileNameIn">Filename of the input csv file</param>
            <param name="fileNameOut">Filename of the output xml file</param>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.CSVtoXMLConverter.Generate">
            <summary>
            This method generates the xml file from the csv file by using the overridden 
            Write method. This enables this class to be derived from and provide csv to xml conversion
            for any csv file
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.CSVtoXMLConverter.Write(System.String)">
            <summary>
            This method must be overriden by any classes that derive from this class.
            </summary>
            <param name="CSVLine">A single line of csv style text to be parsed.</param>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.CSVtoXMLConverter.Dispose">
            <summary>
            This class is disposable to assist in removing file handles and other
            expensive resources when it terminates. It should be instantiated using the 
            c# 'Using' constructor
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.Utilities.CSVtoXMLConverter.Unit">
            <summary>
            This is a basic example of how a derived class should be written
            in order to import users 
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.CSVtoXMLConverter.Unit.#ctor(System.IO.FileStream,System.IO.FileStream)">
            <summary>
            Constructor that overrides the base constructor
            </summary>
            <param name="fsInput">Input filestream</param>
            <param name="fsOutput">Output filestream</param>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.CSVtoXMLConverter.Unit.#ctor(System.String,System.String)">
            <summary>
            Constructor that overrides the base constructor
            </summary>
            <param name="fileNameIn">Input filestream</param>
            <param name="fileNameOut">Output filestream</param>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.CSVtoXMLConverter.Unit.Write(System.String)">
            <summary>
            Sample implementation of how a CSV file may be translated into 
            an xml file.
            </summary>
            <param name="CSVLine">A string containing csv values from a single line of a csv file</param>
        </member>
        <member name="T:Bdw.Application.Salt.Utilities.CSVtoXMLConverter.User">
            <summary>
            User class derived form the csv to xml converter
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.CSVtoXMLConverter.User.#ctor(System.IO.FileStream,System.IO.FileStream)">
            <summary>
            Constructor that overrides the base constructor
            </summary>
            <param name="fsInput">Input filestream</param>
            <param name="fsOutput">Output filestream</param>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.CSVtoXMLConverter.User.#ctor(System.String,System.String)">
            <summary>
            Constructor that overrides the base constructor
            </summary>
            <param name="fileNameIn">Input filestream</param>
            <param name="fileNameOut">Output filestream</param>
        </member>
        <member name="M:Bdw.Application.Salt.Utilities.CSVtoXMLConverter.User.Write(System.String)">
            <summary>
            This method must be overriden by any classes that derive from this class.
            </summary>
            <param name="CSVLine">A single line of csv style text to be parsed.</param>
        </member>
        <member name="T:Bdw.Application.Salt.Data.BusinessServiceException">
             <summary>
             There are two types of exceptions:
             1. User-defined Application Exception (Derived from the ApplicationException class):
             This type of exception is generated in the business service classes or other application classes. They are expected and non-fatal.
             It is normally used by data validation. In cases where this class is instantiated, a human-readable message describing the error should be passed to the constructor.
             In most scenarios, instances of this class should not be thrown. 
             Web site aspx file should catch this exception and  show it in user interface and don't bubble it futher.
            
             2. System Exception (Derived from the SystemException class)
             This type of exception is generated by the data access classes or common language runtime. 
             They are unexpected and critical, it is usually caused by wrong code.
             It is not recommended that you catch a System Exception.
             This exception should not be displayed in user interface and need to be bubbled up
             The application will log this exception and redirect user to error page.
             </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.BusinessServiceException.#ctor">
            <summary>
            Constructor for a business server exception
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.BusinessServiceException.#ctor(System.String)">
            <summary>
            Constructor for a business server exception with a custom message
            </summary>
            <param name="message">Custom Message</param>
        </member>
        <member name="M:Bdw.Application.Salt.Data.BusinessServiceException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for a business server exception with a custom message and an inner message
            </summary>
            <param name="message">Custom Message</param>
            <param name="inner">Inner Message</param>
        </member>
        <member name="M:Bdw.Application.Salt.Data.BusinessServiceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This protected constructor is used for deserialization.
            </summary>
            <param name="info">Serialization information</param>
            <param name="context">Streaming Context</param>
        </member>
        <member name="T:Bdw.Application.Salt.Data.RecordNotFoundException">
            <summary>
            Usage:(1)
            1. Access one specific entity details,but that entity doesn't exist
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.RecordNotFoundException.#ctor">
            <summary>
            Record not found exception
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.RecordNotFoundException.#ctor(System.String)">
            <summary>
            Record not found exception with a custom message
            </summary>
            <param name="message">Custom Message</param>
        </member>
        <member name="M:Bdw.Application.Salt.Data.RecordNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Record not found exception with a custom message and inner message
            </summary>
            <param name="message">Custom Message</param>
            <param name="inner">Inner Message</param>
        </member>
        <member name="M:Bdw.Application.Salt.Data.RecordNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This protected constructor is used for deserialization.
            </summary>
            <param name="info">Serialization information</param>
            <param name="context">Streaming Context</param>
        </member>
        <member name="T:Bdw.Application.Salt.Data.FKViolationException">
            <summary>
            Usage:(2)
            1. Insert a record, the value of FK column doesn't exist
            2. Update a record, the value of FK column doesn't exist
            3. Delete a record, there are other records have reference to it
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.FKViolationException.#ctor">
            <summary>
            Foreign Key Violation Exception
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.FKViolationException.#ctor(System.String)">
            <summary>
            Foreign Key Violation Exception with a cusom message
            </summary>
            <param name="message">Custom Message</param>
        </member>
        <member name="M:Bdw.Application.Salt.Data.FKViolationException.#ctor(System.String,System.Exception)">
            <summary>
            Foreign Key Violation Exception with a custom message and inner message
            </summary>
            <param name="message">Custom Message</param>
            <param name="inner">Inner Message</param>
        </member>
        <member name="M:Bdw.Application.Salt.Data.FKViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This protected constructor is used for deserialization.
            </summary>
            <param name="info">Serialization information</param>
            <param name="context">Streaming Context</param>
        </member>
        <member name="T:Bdw.Application.Salt.Data.PKViolationException">
            <summary>
            Usage:(3)
            1. Primary key is not identity column,  update or insert duplicated PK record, it is similar to the UniqueViolationException
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.PKViolationException.#ctor">
            <summary>
            Primary Key Violation Exception
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.PKViolationException.#ctor(System.String)">
            <summary>
            Primary Key Violation Exception
            </summary>
            <param name="message">Custom Message</param>
        </member>
        <member name="M:Bdw.Application.Salt.Data.PKViolationException.#ctor(System.String,System.Exception)">
            <summary>
            Primary Key Violation Exception
            </summary>
            <param name="message">Custom Message</param>
            <param name="inner">Inner Message</param>
        </member>
        <member name="M:Bdw.Application.Salt.Data.PKViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This protected constructor is used for deserialization.
            </summary>
            <param name="info">Serialization information</param>
            <param name="context">Streaming Context</param>
        </member>
        <member name="T:Bdw.Application.Salt.Data.UniqueViolationException">
            <summary>
            Usage:(4)
            1. Insert or update a record, the value of unique column exists
               e.g. In user table, UserName is unique, you can't save two records with same UserName
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.UniqueViolationException.#ctor">
            <summary>
            Unique Violation Exception
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.UniqueViolationException.#ctor(System.String)">
            <summary>
            Unique Violation Exception with a custom message
            </summary>
            <param name="message">Custom Message</param>
        </member>
        <member name="M:Bdw.Application.Salt.Data.UniqueViolationException.#ctor(System.String,System.Exception)">
            <summary>
            Unique Violation Exception
            </summary>
            <param name="message">Custom Message</param>
            <param name="inner">Inner Message</param>
        </member>
        <member name="M:Bdw.Application.Salt.Data.UniqueViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This protected constructor is used for deserialization.
            </summary>
            <param name="info">Serialization information</param>
            <param name="context">Streaming Context</param>
        </member>
        <member name="T:Bdw.Application.Salt.Data.PermissionDeniedException">
            <summary>
            Usage(6)
            This exception is caseud from invalid permissions
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.PermissionDeniedException.#ctor">
            <summary>
            Permission denied exception
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.PermissionDeniedException.#ctor(System.String)">
            <summary>
            Permission denied exception with a custom message
            </summary>
            <param name="message">Custom Message</param>
        </member>
        <member name="M:Bdw.Application.Salt.Data.PermissionDeniedException.#ctor(System.String,System.Exception)">
            <summary>
            Permission denied exception with a custom message and inner message
            </summary>
            <param name="message">Custom Message</param>
            <param name="inner">Inner Message</param>
        </member>
        <member name="M:Bdw.Application.Salt.Data.PermissionDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This protected constructor is used for deserialization.
            </summary>
            <param name="info">Serialization information</param>
            <param name="context">Streaming Context</param>
        </member>
        <member name="T:Bdw.Application.Salt.Data.IntegrityViolationException">
            <summary>
            Usage(7)
            This exception is caseud from an integrity violation.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.IntegrityViolationException.#ctor">
            <summary>
            Integrity Violation Exception
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.IntegrityViolationException.#ctor(System.String)">
            <summary>
            Integrity Violation Exception with a custom message
            </summary>
            <param name="message">Custom Message</param>
        </member>
        <member name="M:Bdw.Application.Salt.Data.IntegrityViolationException.#ctor(System.String,System.Exception)">
            <summary>
            Integrity Violation Exception with a custom message and inner message
            </summary>
            <param name="message">Custom Message</param>
            <param name="inner">Inner Message</param>
        </member>
        <member name="M:Bdw.Application.Salt.Data.IntegrityViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This protected constructor is used for deserialization.
            </summary>
            <param name="info">Serialization information</param>
            <param name="context">Streaming Context</param>
        </member>
        <member name="T:Bdw.Application.Salt.Data.DatabaseException">
            <summary>
            This exception is generated in data access layer. 
            The exception is unexpected, it is usually caused by wrong code.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.DatabaseException.#ctor">
            <summary>
            Database Exception with a custom message and inner message
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.DatabaseException.#ctor(System.String)">
            <summary>
            Database Exception with a custom message and inner message
            </summary>
            <param name="message">Custom Message</param>
        </member>
        <member name="M:Bdw.Application.Salt.Data.DatabaseException.#ctor(System.String,System.Exception)">
            <summary>
            Database Exception with a custom message and inner message
            </summary>
            <param name="message">Custom Message</param>
            <param name="inner">Inner Message</param>
        </member>
        <member name="M:Bdw.Application.Salt.Data.DatabaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This protected constructor is used for deserialization.
            </summary>
            <param name="info">Serialization information</param>
            <param name="context">Streaming Context</param>
        </member>
        <member name="T:Bdw.Application.Salt.Data.ParameterException">
            <summary>
            Usage(5)
            This is an unexpected exception usually caused from bad code.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.ParameterException.#ctor">
            <summary>
            Parameter Exception with a custom message and inner message
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.Data.ParameterException.#ctor(System.String)">
            <summary>
            Parameter Exception with a custom message and inner message
            </summary>
            <param name="message">Custom Message</param>
        </member>
        <member name="M:Bdw.Application.Salt.Data.ParameterException.#ctor(System.String,System.Exception)">
            <summary>
            Parameter Exception with a custom message and inner message
            </summary>
            <param name="message">Custom Message</param>
            <param name="inner">Inner Message</param>
        </member>
        <member name="M:Bdw.Application.Salt.Data.ParameterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This protected constructor is used for deserialization.
            </summary>
            <param name="info">Serialization information</param>
            <param name="context">Streaming Context</param>
        </member>
        <member name="T:Bdw.Application.Salt.Data.UserType">
            <summary>
            This is the public enum for the user type.
            </summary>
            <remarks>
            Assumptions: The values in the database table do not change and always match the values here.
            Notes: This maps to the database table tblUserType.
            Author: Peter Vranich, 28/01/0/2004
            Changes:
            </remarks>
        </member>
        <member name="F:Bdw.Application.Salt.Data.UserType.SaltAdmin">
            <summary>
            Salt Administrator
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.UserType.OrgAdmin">
            <summary>
            Organisational Administrator
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.UserType.UnitAdmin">
            <summary>
            Unit Administrator
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.UserType.User">
            <summary>
            Regular User
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.Data.CSVtoXMLConverterTypes">
            <summary>
            This is the public enum for the CSV to XML conversion types.
            </summary>
            <remarks>
            Assumptions:.
            Notes:.
            Author: Peter Kneale, 07/05/2004
            Changes:
            </remarks>
        </member>
        <member name="F:Bdw.Application.Salt.Data.CSVtoXMLConverterTypes.User">
            <summary>
            Convert a CSV file to an XML file containing users
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.CSVtoXMLConverterTypes.Unit">
            <summary>
            Convert a CSV file to an XML file containing units
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.Data.LessonStatus">
            <summary>
            This is the public enum for the lesson status.
            </summary>
            <remarks>
            Assumptions: The values in the database table do not change and always match the values here.
            Notes: This maps to the database table tblLessonStatus.
            Author: Peter Vranich, 28/01/0/2004
            Changes:
            </remarks>
        </member>
        <member name="F:Bdw.Application.Salt.Data.LessonStatus.Unassigned">
            <summary>
            The user has not been assigned to the lesson
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.LessonStatus.NotStarted">
            <summary>
            User has not started 
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.LessonStatus.InProgress">
            <summary>
            The lesson is in progress
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.LessonStatus.Completed">
            <summary>
            The lesson is complete
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.LessonStatus.ExpiredTimeElapsed">
            <summary>
            The lesson status has expired due to the time elapsed.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.LessonStatus.ExpiredNewContent">
            <summary>
            The lesson status has been overridden by new content arriving in the system
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.Data.QuizStatus">
            <summary>
            This is the public enum for the quiz status.
            </summary>
            <remarks>
            Assumptions: The values in the database table do not change and always match the values here.
            Notes: This maps to the database table tblQuizStatus.
            Author: Peter Vranich, 28/01/0/2004
            Changes:
            </remarks>
        </member>
        <member name="F:Bdw.Application.Salt.Data.QuizStatus.Unassigned">
            <summary>
            The user has not been assigned to the quiz
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.QuizStatus.NotStarted">
            <summary>
            The user has not started the quiz
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.QuizStatus.Passed">
            <summary>
            The user has passed the quiz
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.QuizStatus.Failed">
            <summary>
            The user has failed the quiz
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.QuizStatus.ExpiredTimeElapsed">
            <summary>
            The users quiz status has expired due to the time elapsed.
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.QuizStatus.ExpiredNewContent">
            <summary>
            The users quiz status has expired due to new content being present.
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.Data.CourseStatus">
            <summary>
            This is the public enum for the course status.
            </summary>
            <remarks>
            Assumptions: The values in the database table do not change and always match the values here.
            Notes: This maps to the database table tblCourseStatus.
            Author: Gavin Buddis, 2/04/2004
            Changes:
            </remarks>
        </member>
        <member name="F:Bdw.Application.Salt.Data.CourseStatus.Unassigned">
            <summary>
            The user is not currently assigned to the course (but previously was)
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.CourseStatus.InComplete">
            <summary>
            Course is incomplete
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.CourseStatus.Complete">
            <summary>
            Course is complete
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.Data.ErrorLevel">
            <summary>
            This is the public enum for the error level.
            </summary>
            <remarks>
            Assumptions: The values in the database table do not change and always match the values here.
            Notes: This maps to the database table tblErrorLevel.
            Author: Peter Vranich, 28/01/0/2004
            Changes:
            </remarks>
        </member>
        <member name="F:Bdw.Application.Salt.Data.ErrorLevel.High">
            <summary>
            High Severity Error
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.ErrorLevel.Medium">
            <summary>
            Medium Severity Error (default)
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.ErrorLevel.Low">
            <summary>
            Low Severity Error
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.ErrorLevel.Warning">
            <summary>
            Warning Error
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.ErrorLevel.InformationOnly">
            <summary>
            Information Only Error
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.Data.ErrorStatus">
            <summary>
            This is a public enum for the error status.
            </summary>
            <remarks>
            Assumptions: The values in the database table do not change and always match the values here.
            Notes: This maps to the database table tblErrorStatus.
            Author: Peter Vranich, 28/01/0/2004
            Changes:
            </remarks>
        </member>
        <member name="F:Bdw.Application.Salt.Data.ErrorStatus.Unassigned">
            <summary>
            The error is unassigned (default)
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.ErrorStatus.Assigned">
            <summary>
            The error has been assigned
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.ErrorStatus.NeedMoreInformation">
            <summary>
            More Information is needed 
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.ErrorStatus.NoSolution">
            <summary>
            No solution is available
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.ErrorStatus.Fixed">
            <summary>
            This error has been fixed.
            </summary>
        </member>
        <member name="T:Bdw.Application.Salt.Data.EmailReportType">
            <summary>
            Enumeration of the report type for the email report
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.EmailReportType.Email_Report_Complete_To_Administrators">
            <summary>
            Report for completed users sent to administrators
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.EmailReportType.Policy_Email_Report_Accepted_To_Administrators">
            <summary>
            Report for policy accepted users sent to administrators
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.EmailReportType.Policy_Email_Report_Not_Accepted_To_Administrators">
            <summary>
            Report for policy not accepted users sent to administrators
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.EmailReportType.Policy_Email_Report_Accepted_To_Users">
            <summary>
            Report for policy accepted users sent to users
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.EmailReportType.Policy_Email_Report_Not_Accepted_To_Users">
            <summary>
            Report for policy not accepted users sent to users
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.EmailReportType.Email_Report_Failed_To_Administrators">
            <summary>
            Report for failed users sent to administrators
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.EmailReportType.Email_Report_Not_Started_Administrators">
            <summary>
            Report for not started users sent to administrators
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.EmailReportType.Email_Report_InComplete_To_Administrators">
            <summary>
            Report for all incomplete users sent to administrators
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.EmailReportType.Email_Report_Expired_Time_Elapsed_To_Administrators">
            <summary>
            Report for all expired time elapsed users sent to administrators
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.EmailReportType.Email_Report_Expired_New_Content_To_Administrators">
            <summary>
            Report for all expired new content users sent to administrators
            </summary>
        </member>
        <member name="F:Bdw.Application.Salt.Data.EmailReportType.Email_Report_Complete_To_Users">
            <summary>
            Report for completed users sent to users directly
            </summary>                                                                                                                                                                                           
        </member>
        <member name="F:Bdw.Application.Salt.Data.EmailReportType.Email_Report_Failed_To_Users">
            <summary>
            Report for failed users sent to users directly
            </summary>                                                                                                                                                                                           
        </member>
        <member name="F:Bdw.Application.Salt.Data.EmailReportType.Email_Report_Not_Started_To_Users">
            <summary>
            Report for not started users sent to users directly
            </summary>                                                                                                                                                                                           
        </member>
        <member name="F:Bdw.Application.Salt.Data.EmailReportType.Email_Report_InComplete_To_Users">
            <summary>
            Report for incomplete users sent to users directly
            </summary>   
        </member>
        <member name="F:Bdw.Application.Salt.Data.EmailReportType.Email_Report_Expired_Time_Elapsed_To_Users">
            <summary>
            Report for expired time elapsed users sent to users directly
            </summary>  
        </member>
        <member name="F:Bdw.Application.Salt.Data.EmailReportType.Email_Report_Expired_New_Content_To_Users">
            <summary>
            Report for expired new content users sent to users directly
            </summary>  
        </member>
        <member name="F:Bdw.Application.Salt.Data.EmailReportType.Email_Incomplete_CPD_User">
            <summary>
            CPD Email reports
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Bdw.Application.Salt.Data.QueryType" -->
        <member name="T:Bdw.Application.Salt.BusinessServices.Email">
            <summary>
            Handles logging of emails sent to the salt database.
            Handles searching of the above email log
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: All Developers
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Email.Search(System.DateTime,System.DateTime,System.String,System.String,System.String,System.Int32)">
            <summary>
            search email sent within the selected date range to a email and contain text in subject or body
            </summary>
            <param name="dateFrom">From Email sent</param>
            <param name="dateTo">To Date Email sent</param>
            <param name="toEmail">Email address that the email sent to</param>
            <param name="subject">The text subject contains</param>
            <param name="body">The text body contains</param>
            <returns>DataTable containing search results as per criteria specified</returns>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Email.LogSentEmail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            This function logs to tblEmail the fact that an email has been successfully sent
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Kneale 03/03/04
            Changes:
            </remarks>
            <param name="toEmail">The email address of the recipient of the email</param>
            <param name="toName">The name of the recipient of the email</param>
            <param name="fromEmail">The email address of the sender of the email</param>
            <param name="fromName">The name of the sender of the email</param>
            <param name="CC">The CC list on the email</param>
            <param name="BCC">The BCC list on the email</param>
            <param name="subject">The Subject of the email</param>
            <param name="body">The body of the email</param>
            <param name="organisationID">the organisation the email is being sent from and to</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Email.SendEmail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            This method send an email using the MailMessage object.
            </summary>
            <param name="toEmail">Recipients Email Address</param>
            <param name="toName">Recipients Name</param>
            <param name="fromEmail">Senders Email Address</param>
            <param name="fromName">Senders Name</param>
            <param name="CC">CC Email List</param>
            <param name="BCC">BCC Email List</param>
            <param name="subject">Email Subject</param>
            <param name="body">Email Body</param>
            <param name="serverName">serverName</param>
            <param name="organisationID">organisation sending the email</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Email.SendEmail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="toEmail"></param>
            <param name="toName"></param>
            <param name="fromEmail"></param>
            <param name="fromName"></param>
            <param name="CC"></param>
            <param name="BCC"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="serverName"></param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Email.GetUsersToEmail(System.Int32,System.String)">
            <summary>
            Searches for the users within the current organisation, in the specified units.
            </summary>
            <param name="organisationID"></param>
            <param name="unitIDs">comma seperated list of unit ids</param>
            <remarks>
            Author: Mark Donald 03/08/2009
            Changes:
            </remarks>
            <returns>DataTable of user details</returns>
        </member>
        <member name="T:Bdw.Application.Salt.BusinessServices.Classification">
            <summary>
            Provide Data Access Services for the Classification Table
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: John Crawford
            Date: 18/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Classification.GetClassificationType(System.Int32)">
            <summary>
            Gets the classification type based on the organisation ID
            </summary>
            <param name="organisationID">Value of the current organisation for the user</param>
            <returns>A Datatable with the rows (only one) from the ClassificationType table</returns>
            <remarks>
            Assumptions: There is currenlty only 1 classification Type per Organisation ID
            Notes: 
            Author: John Crawford
            Date: 18/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Classification.GetClassificationList(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Gets a list of active classification options based upon a classification ID.
            </summary>
            <param name="classificationTypeID"> The ID of the classification.</param>
            <returns> DataTable containing all the rows for a particular classification.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: John Crawford
            Date: 18/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Classification.GetClassificationListAll(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Gets a list of all classification options based upon a classification ID.
            </summary>
            <param name="classificationTypeID"> The ID of the classification.</param>
            <returns> DataTable containing all the rows for a particular classification.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Vranich
            Date: 19/02/0/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Classification.AddClassificationType(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlInt32)">
            <summary>
            Adds a new classification type to the database.
            </summary>
            <param name="name"> The name of the classification type.</param>
            <param name="organisationID"> The ID of the organisation the the classification type belongs to.</param>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Vranich
            Date: 18/02/0/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Classification.UpdateClassificationType(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
            <summary>
            Updates a classification type for a specific organisation.
            </summary>
            <param name="name"> The name of the classification type.</param>
            <param name="classificationTypeID"> The ID of the classification type to be updated.</param>
            <param name="organisationID"> The ID of the organisation the the classification type belongs to.</param>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Vranich
            Date: 18/02/0/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Classification.UpdateClassification(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
            <summary>
            Updates a classification for a specific classification type.
            </summary>
            <param name="name"> The name of the classification.</param>
            <param name="active"> The status of the classification.</param>
            <param name="classificationID"> The ID of the classification to be updated.</param>
            <param name="classificationTypeID"> The ID of the classification type that the classification belongs to.</param>
            <returns> The ID of the classification type.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Vranich
            Date: 19/02/0/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Classification.AddClassification(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlInt32)">
            <summary>
            Updates a classification for a specific classification type.
            </summary>
            <param name="name"> The name of the classification.</param>
            <param name="active"> The status of the classification.</param>
            <param name="classificationTypeID"> The ID of the classification type to be updated.</param>
            <returns> The ID of the classification type.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Peter Vranich
            Date: 19/02/0/2004
            Changes:
            </remarks>
        </member>
        <member name="T:Bdw.Application.Salt.BusinessServices.Course">
            <summary>
            This class manages database activity for Course related data 
            </summary>
            <remarks>
            Assumptions: None.
            Notes: None.
            Author: Gavin Buddis
            Date: 03/03/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Course.GetCourseList(System.Int32)">
            <summary>
            Gets a list of Courses.
            </summary>
            <returns>Returns a DataTable with the details of all courses.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Stephen K-Clark, 9/02/04
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Course.GetCourse(System.Int32,System.Int32)">
            <summary>
            Gets a single Course's details.
            </summary>
            <returns>Returns a DataTable with the details of the specified Course.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Stephen K-Clark, 9/02/04
            Changes:
            </remarks>
            <param name="courseID">ID of the course to get the details for</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Course.GetCourseBySessionID(System.Data.SqlTypes.SqlString)">
            <summary>
            Gets the course ID given the session ID
            </summary>
            <returns>Returns the ID of the Course as an int, -1 if no session was found matching this session id</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Stephen K-Clark, 9/02/04
            Changes:
            </remarks>
            <param name="sessionID">ID of the session to get the course id for</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Course.GetCourseListAccessableToOrg(System.Int32)">
            <summary>
            Gets a list of Courses and their details available to an organisation
            </summary>
            <returns>Returns a DataTable with the details of Accessable Courses in the SALT database.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Stephen Kennedy-Clark
            Date: 09/02/2004
            Changes: 
            </remarks>
            <param name="organisationID"> ID of the organisation for which to get the details</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Course.GetCourseListAccessableToUser(System.Int32)">
            <summary>
            Gets a list of Courses and their details available to a user
            </summary>
            <returns>Returns a DataTable with the details of Accessable Courses in the SALT database.</returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Stephen Kennedy-Clark
            Date: 09/02/2004
            Changes: 
            </remarks>
            <param name="userID"> ID of the user for which to get the details</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Course.IncrementModuleSequence(System.Int32,System.Int32,System.Int32)">
            <summary>
            Increments by 1 the Module sequence value for the specified module
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Gavin Buddis
            Date: 03/03/2004
            Changes: 
            </remarks>
            <param name="moduleIDToIncrement">ID of the module to move</param>
            <param name="updatedByUserID">ID of the user preforming the update</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Course.DecrementModuleSequence(System.Int32,System.Int32,System.Int32)">
            <summary>
            Decrements by 1 the Module sequence value for the specified module
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Gavin Buddis
            Date: 03/03/2004
            Changes: 
            </remarks>
            <param name="moduleIDToDecrement">ID of the module</param>
            <param name="updatedByUserID">ID of the user</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Course.Update(System.Int32,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Updates a course details. If the status is changed, there will be validation checking.
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Gavin Buddis
            Date: 03/03/2004
            Changes: 
            </remarks>
            <param name="courseID">ID of the course</param>
            <param name="name">Course Name</param>
            <param name="notes">Course Notes</param>
            <param name="active">Is Course Active</param>
            <param name="updatedByUserID">User ID of user preforming the update</param>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.Course.Create(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Creates a course.
            </summary>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Gavin Buddis
            Date: 03/03/2004
            Changes: 
            </remarks>
            <param name="name">Name of the course</param>
            <param name="notes">Notes for this course</param>
            <param name="active">Is this course active</param>
            <param name="createdByUserID">Id of the user creatig this course</param>
        </member>
        <member name="T:Bdw.Application.Salt.BusinessServices.AppConfig">
            <summary>
            This class handles all of the application configuration settings
            retrieval and updating.
            </summary>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.AppConfig.GetList">
            <summary>
            Get a list of application configuration
            </summary>
            <returns></returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.AppConfig.GetVersion">
            <summary>
            Get the Version of the application
            </summary>
            <returns></returns>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Stephen Kennedy-Clark, 10/02/2004
            Changes:
            </remarks>
        </member>
        <member name="M:Bdw.Application.Salt.BusinessServices.AppConfig.Update(System.String,System.String)">
            <summary>
            Updates configuration details.
            </summary>
            <param name="name">This is the unique key, and read-only</param>
            <param name="value">The value of the setting</param>
            <remarks>
            Assumptions: None
            Notes: 
            Author: Jack Liu, 26/02/2004
            Changes:
            </remarks>
        </member>
    </members>
</doc>
