#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4963
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bdw.Application.Salt.Web.Reporting
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;


    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "salt_4.3.0")]
	public partial class CCListDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttblCCList(tblCCList instance);
    partial void UpdatetblCCList(tblCCList instance);
    partial void DeletetblCCList(tblCCList instance);
    #endregion
		
		public CCListDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["bd_dev_partially_truncatedConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CCListDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CCListDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CCListDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CCListDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tblCCList> tblCCLists
		{
			get
			{
				return this.GetTable<tblCCList>();
			}
		}
	}
	
	[Table(Name="dbo.tblCCList")]
	public partial class tblCCList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CCId;
		
		private int _UserID;
		
		private int _ScheduleId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCCIdChanging(int value);
    partial void OnCCIdChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnScheduleIdChanging(int value);
    partial void OnScheduleIdChanged();
    #endregion
		
		public tblCCList()
		{
			OnCreated();
		}
		
		[Column(Storage="_CCId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CCId
		{
			get
			{
				return this._CCId;
			}
			set
			{
				if ((this._CCId != value))
				{
					this.OnCCIdChanging(value);
					this.SendPropertyChanging();
					this._CCId = value;
					this.SendPropertyChanged("CCId");
					this.OnCCIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_ScheduleId", DbType="Int NOT NULL")]
		public int ScheduleId
		{
			get
			{
				return this._ScheduleId;
			}
			set
			{
				if ((this._ScheduleId != value))
				{
					this.OnScheduleIdChanging(value);
					this.SendPropertyChanging();
					this._ScheduleId = value;
					this.SendPropertyChanged("ScheduleId");
					this.OnScheduleIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
