/*=====================================================================
  File:     ReportExport.cs
  
This class is used to export a report to different formats such as PDF, Excel.
  
=====================================================================*/
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Specialized;
using System.Text;
using System.IO;

using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

using System.Diagnostics;

using System.Web.Services.Protocols;


using Bdw.SqlServer.Reporting.ReportingServices;


namespace Bdw.SqlServer.Reporting
{
	/// <summary>
	/// Summary description for ExportReport.
	/// </summary>
	public class ReportExport: ReportBasePage
	{
		private void Page_Load(object sender, System.EventArgs e)
		{
			byte[] reportContent;
			string mimeType;
			string fileName;
			//1.Get report content
			reportContent = this.GetReportContent(out mimeType);
			fileName = Util.GetCSVFileName(this.ReportPath, mimeType);

			//2. Output and force download
			Response.ClearContent();
			Response.ClearHeaders();

			Response.ContentType = mimeType;
			Response.AppendHeader("Content-Length", reportContent.Length.ToString());
			Response.AddHeader ("content-disposition", "attachment; filename=\"" + fileName + "\"");
			Response.BinaryWrite(reportContent);

			Response.Flush();
			Response.Close();

		}

		/// <summary>
		/// Renders the report via SOAP
		/// </summary>
		/// <returns></returns>
		private byte[] GetReportContent(out string mimeType)
		{
			ReportingService rs;

			byte[] content;
			//In argements
			string deviceInfo;
			ParameterValue[] parameterValues;

			//Out arguments
			string encoding;
			Warning[] warnings = null;
			ParameterValue[] parametersUsed = null;
			string[] streamIDs = null;

			//1. Get input arguments
			// Set html device information
			deviceInfo = "";
			//Get report parameters
			parameterValues = this.ReportParameters;
			

			//2. Get reporting web service
			rs = Util.GetReportingService(this.SessionID);

			//3. Call render web service	
			content = rs.Render(this.Settings.ReportFolder + this.ReportPath, this.Format, null, deviceInfo, parameterValues, null, null, 
				out encoding, out mimeType, out parametersUsed, out warnings,out streamIDs);
			
			//4. Session Validation
			if (this.Settings.SessionValidation)
			{
				if (rs.SessionHeaderValue.SessionId != this.SessionID)
				{
					throw new ApplicationException("Session timeout");
				}
			}
			return content;
		}
		
	}

}
